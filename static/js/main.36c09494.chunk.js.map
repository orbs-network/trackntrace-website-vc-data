{"version":3,"sources":["serviceWorker.ts","names.ts","record.ts","record-store.ts","statistics.ts","resources.ts","item-status-page.tsx","bar-chart.tsx","overview-page.tsx","routes.ts","side-menu.tsx","loading-page.tsx","error-page.tsx","App.tsx","index.tsx","stores.ts"],"names":["Boolean","window","location","hostname","match","names","hashCode","s","Math","abs","split","reduce","a","b","charCodeAt","ScanRecord","raw","rawLowecase","this","Object","keys","forEach","k","toLowerCase","tagid","timestampInMilliseconds","timestamp","Date","gatewayid","eventtype","eventvalue","JSON","stringify","toString","h","recordId","lastName","length","RecordStore","pollingIntervalMs","init","now","fetch","delay","max","setTimeout","ready","f","err","process","REACT_APP_RECORDS_URL","res","json","records","filter","r","msg","map","find","x","observable","Statistics","recordsStore","item","_","itemRecords","timestampInSeconds","itemId","groupBy","values","pRecs","mean","value","avgPiplineTimePerItemInSeconds","mapValues","recs","n","uniq","latestRecordsPerItem","gatewayId","counts","gatewayAlias","g","tooManyScansAlerts","alerts","itemUIDs","uid","itemRecordsSortedByTime","timestampAsDate","alertType","count","computed","gatewayImage","twodigits","ItemStatusPage","inject","observer","currentTimeoutHandle","loadData","reaction","selected","clearTimeout","props","statistics","style","margin","display","alignItems","fontWeight","fontSize","padding","Autocomplete","options","getOptionLabel","option","width","filterOptions","createFilterOptions","matchFrom","onChange","e","selectedItemUID","renderInput","params","TextField","label","variant","CircularProgress","marginLeft","borderRadius","border","backgroundColor","flexDirection","marginRight","overflow","color","letterSpacing","paddingBottom","className","paddingLeft","floor","itemPipelineTimeInSeconds","borderBottom","slice","pageSize","currentPage","textAlign","verticalAlign","height","backgroundImage","backgroundSize","backgroundRepeat","whiteSpace","backgroundPosition","eventType","eventValue","getDate","toLocaleString","month","getFullYear","getHours","getMinutes","TablePagination","rowsPerPageOptions","component","rowsPerPage","page","onChangePage","onChangeRowsPerPage","parseInt","target","isOperatorDialogOpen","Dialog","onClose","closeOperatorDialog","aria-labelledby","open","DialogContent","scanRecordForOperatorRetreival","retrievingDetails","operatorDetails","Button","onClick","retreiveOperatorDetails","DialogActions","autoFocus","marginTop","operatorFullName","indexOf","React","Component","Bar","toRunOnMount","fs","push","image","percent","flex","alignContent","transition","ref","runOnMount","ceil","boxSizing","minHeight","minWidth","paddingTop","wordBreak","BarChart","labels","colors","images","maxValue","justifyContent","l","i","Databox","mounted","v","decimals","data","mountedAt","update","delta","initDisplayedData","requestAnimationFrame","finalDisplayedData","initial","title","format","subText","routes","name","path","menuImg","cssClass","displayIndex","byGateway","itemCountByGatewayAlias","gateways","toJS","sort","flexWrap","borderRight","gateway","renderDataSection","alertedItems","avgPiplineTimePerItemInDays","avgRecordsPerItem","src","alt","getCurrentRoute","hash","Link","SideMenu","route","currentRoute","dangerouslySetInnerHTML","__html","marginBottom","navigateTo","onhashchange","LoadingPage","loadingCaption","setInterval","join","ErrorPage","Alert","severity","AlertTitle","App","maxWidth","position","top","left","bottom","right","PageComponent","stores","createStores","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.36c09494.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const names = [\"Clere\", \"Edbert\", \"Kareem\", \"Topper\", \"Busey\", \"Woody\", \"Ikkela\", \"Jenesia\", \"Deirdre\", \"Bloom\", \"Ellwood\", \"Burget\", \"Carnay\", \"Karlotte\", \"Vins\", \"Obau\", \"Adoree\", \"Jensen\", \"Lemuela\", \"Nahum\", \"Eskill\", \"Deeanne\", \"Hayes\", \"Meridel\", \"Flemming\", \"Eldwin\", \"Om\", \"Weisbrodt\", \"Scheer\", \"Carlen\", \"Armalda\", \"Schindler\", \"Rahman\", \"Tolley\", \"Sherwin\", \"Avelin\", \"Xever\", \"Lanny\", \"Jedidiah\", \"Dorie\", \"Madalena\", \"Langston\", \"Halle\", \"Ileana\", \"Hunley\", \"Juieta\", \"Ngo\", \"Lubet\", \"Marlene\", \"Ruthanne\", \"Stover\", \"Decca\", \"Marrin\", \"Taite\", \"Mae\", \"Wester\", \"Bricker\", \"Prissy\", \"Eadith\", \"Zacharie\", \"Malarkey\", \"Prakash\", \"Eichman\", \"Helbonnas\", \"Truc\", \"Horatia\", \"McConnell\", \"Stanhope\", \"Lathan\", \"Hax\", \"Erick\", \"Denney\", \"Faludi\", \"Cherry\", \"Keefer\", \"Jarib\", \"Ahrens\", \"Olwen\", \"Farris\", \"Bibbie\", \"Mont\", \"Sunil\", \"McNalley\", \"Girovard\", \"Schreibe\", \"Kilgore\", \"Stevana\", \"Gabler\", \"Phillida\", \"Putnam\", \"Biagi\", \"Neau\", \"Katherin\", \"Sedgewake\", \"Eisler\", \"Cyrille\", \"Uri\", \"Tammany\", \"Hagar\", \"Amby\"]\n","import {names} from \"./names\";\n\nexport type Stage = 'Factory' | 'Mixing' | 'Distribution' | 'Retail';\nexport const stages: Stage[] = ['Factory', 'Mixing', 'Distribution', 'Retail'];\nexport const stagesDisplay: {[stage in Stage]: string} = {\n    Factory: 'Factory',\n    Mixing: 'Mixing Center',\n    Distribution: 'Distribution Center',\n    Retail: 'Retail'\n};\n\nexport interface IRawScanRecord {\n    tagId: string,\n    latitude: string,\n    longitude: string,\n    eventType: \"PRESENCE\",\n    gatewayId: string,\n    timestamp: number,\n    eventValue: string\n}\n\nexport interface IRawScanRecordLowecaseKeys {\n    tagid: string,\n    latitude: string,\n    longitude: string,\n    eventtype: \"PRESENCE\",\n    gatewayid: string,\n    timestamp: number,\n    eventvalue: string\n}\n\nconst hashCode = s => Math.abs(s.split('').reduce((a,b)=>{a=((a<<5)-a)+b.charCodeAt(0);return a&a},0));\n\nexport class ScanRecord {\n    private rawLowecase: IRawScanRecordLowecaseKeys;\n    constructor(public raw: IRawScanRecord) {\n        this.rawLowecase = {} as IRawScanRecordLowecaseKeys;\n        Object.keys(raw).forEach(k => this.rawLowecase[k.toLowerCase()] = raw[k]);\n    }\n\n    itemId(): string {\n        return this.rawLowecase.tagid;\n    }\n\n    timestampInSeconds(): number {\n        return this.timestampInMilliseconds() / 1000;\n    }\n\n    timestampInMilliseconds(): number {\n        return this.rawLowecase.timestamp * 1000;\n    }\n\n    timestampAsDate(): Date {\n        return new Date(this.timestampInMilliseconds());\n    }\n\n    gatewayId(): string {\n        return this.rawLowecase.gatewayid;\n    }\n\n    eventType(): string {\n        return this.rawLowecase.eventtype;\n    }\n\n    eventValue(): string {\n        return this.rawLowecase.eventvalue;\n    }\n\n    gatewayAlias(): string {\n        return {\n            [\"3c71bf63e190\".toLowerCase()]: \"Original\",\n            [\"GW98f4ab141D14\".toLowerCase()]: \"P&G Manufacturing\",\n            [\"GW984fab141D70\".toLowerCase()]: \"P&G Truck\",\n            [\"GW98f4ab141D38\".toLowerCase()]: \"Customer DC or P&G DC\",\n            [\"GW98f4ab141DF4\".toLowerCase()]: \"Customer DC or P&G DC Shelf\",\n            [\"GW98f4ab141D0C\".toLowerCase()]: \"P&G Customer Store\",\n        }[this.rawLowecase.gatewayid.toLowerCase()] || this.rawLowecase.gatewayid;\n    }\n\n    recordId(): string {\n        // TODO - get from server\n        return hashCode(JSON.stringify(this.raw)).toString();\n    }\n\n    isOperatorAvailable(): boolean {\n        // return this.partner().toLowerCase() == 'p&g';\n        return false\n    }\n\n    operatorFullName(): string {\n        const h = hashCode(this.recordId());\n        const firstName = names[h % names.length];\n        const lastName = names[(h+1) % names.length];\n        return `${firstName} ${lastName}`;\n    }\n}\n","import {observable} from \"mobx\";\nimport {IRawScanRecord, ScanRecord} from \"./record\";\n\nexport class RecordStore {\n\n    @observable ready = false;\n    @observable err: Error = null;\n\n    @observable records: ScanRecord[] = [];\n\n    constructor(pollingIntervalMs = 500) {\n        this.init(pollingIntervalMs)\n    }\n\n    private async init(pollingIntervalMs: number) {\n        try {\n            const now = Date.now();\n            await this.fetch();\n            const delay = Math.max(0, 800 - (Date.now() - now));\n            setTimeout(() => this.ready = true, delay);\n\n            const f = async () => {\n                try {\n                    await this.fetch();\n                    setTimeout(f, pollingIntervalMs)\n                } catch (e) {\n                    this.err = e;\n                }\n            };\n            f();\n        } catch (e) {\n            this.err = e;\n        }\n    }\n\n    public async fetch() {\n        const res = await fetch(process.env.REACT_APP_RECORDS_URL || \"https://png-collector.herokuapp.com/getAllEvents\");\n        const records: IRawScanRecord[] = await res.json();\n\n        if (this.records == null || records.length != this.records.length) {\n            this.records = records\n                .filter(r => (r as any).msg != \"[object Object]\")\n                .filter(r => Object.keys(r).map(k => k.toLowerCase()).find(x => x == \"tagid\"))\n                .map(raw => new ScanRecord(raw));\n        }\n    }\n}\n","import {RecordStore} from \"./record-store\";\nimport * as _ from \"lodash\";\nimport {computed} from \"mobx\";\nimport {ScanRecord} from \"./record\";\n\nexport type AlertType = 'Repeated Scan' | 'Too Many Scans' | 'Adjacent Scans';\nexport interface IAlert {\n    timestamp: Date,\n    alertType: AlertType,\n    itemId: string,\n    // description: string\n}\n\nexport interface IRepeatedScanAlert extends IAlert {\n    location: string,\n    prevTime: Date\n}\n\nexport interface ITooManyScansAlert extends IAlert {\n    count: number\n}\nexport const TooManyScansAlertThreshold = 10;\n\nexport interface IAdjacentScansAlert extends IAlert {\n    deltaInMs: number\n}\nexport const AdjacentScansAlertThresholdMs = 15 * 60 * 1000;\n\nexport class Statistics {\n\n    constructor(public recordsStore: RecordStore) {}\n\n    @computed get avgRecordsPerItem(): number {\n        return _.chain(this.recordsStore.records)\n            .groupBy(r => r.itemId())\n            .values()\n            .map((pRecs: ScanRecord[]) => pRecs.length)\n            .mean()\n            .value() || 0\n    }\n\n    @computed get avgPiplineTimePerItemInDays(): number {\n        return this.avgPiplineTimePerItemInSeconds / 60 / 60 / 24;\n    }\n\n    @computed get avgPiplineTimePerItemInSeconds(): number {\n        const now = Date.now() / 1000;\n        return _.chain(this.recordsStore.records)\n            .groupBy(r => r.itemId())\n            .mapValues((recs: ScanRecord[]) => now - _.min(recs.map(r => r.timestampInSeconds())))\n            .map(n => Math.max(n, 0))\n            .mean()\n            .value() || 0;\n    }\n\n    itemPipelineTimeInSeconds(item: string): number {\n        const now = Date.now() / 1000;\n        return now - _.min(this.itemRecords(item).map(r => r.timestampInSeconds()));\n    }\n\n    @computed get itemUIDs(): string[] {\n        return _.chain(this.recordsStore.records)\n            .map(r => r.itemId())\n            .uniq()\n            .value();\n    }\n\n    @computed get latestRecordsPerItem(): ScanRecord[] {\n        return _.chain(this.recordsStore.records)\n            .groupBy(r => r.itemId())\n            .mapValues((recs: ScanRecord[]) => _.maxBy(recs, (r: ScanRecord) => r.timestampInSeconds()))\n            .values()\n            .value()\n    }\n\n    public itemRecords(itemId: string): ScanRecord[] {\n        return this.recordsStore.records.filter(r => r.itemId() == itemId);\n    }\n\n    public itemRecordsSortedByTime(itemId: string): ScanRecord[] {\n        return _.sortBy(this.itemRecords(itemId), r => r.timestampInMilliseconds());\n    }\n\n    @computed get itemCountByGateway(): {[partnerName: string]: number} {\n        return _.chain(this.latestRecordsPerItem)\n            .groupBy(r => r.gatewayId())\n            .mapValues(recs => recs.length)\n            .value()\n    }\n\n    @computed get itemCountByGatewayAlias(): {[gatewayAlias: string]: number} {\n        const counts = _.chain(this.latestRecordsPerItem)\n            .groupBy(r => r.gatewayAlias())\n            .mapValues(recs => recs.length)\n            .value();\n        const gateways = [\"Original\",\n            \"P&G Manufacturing\",\n            \"P&G Truck\",\n            \"Customer DC or P&G DC\",\n            \"Customer DC or P&G DC Shelf\",\n            \"P&G Customer Store\"];\n        for (const g of gateways) {\n            counts[g] = counts[g] || 0;\n        }\n        return counts;\n    }\n\n    @computed get alerts(): IAlert[] {\n        return this.tooManyScansAlerts;\n    }\n\n    @computed get alertedItems(): string[] {\n        return _.uniq(this.alerts.map(a => a.itemId));\n    }\n\n    @computed get tooManyScansAlerts(): ITooManyScansAlert[] {\n        return this.itemUIDs\n            .map(uid => this.itemRecordsSortedByTime(uid))\n            .filter(records => records.length > TooManyScansAlertThreshold)\n            .map(records => ({\n                timestamp: records[TooManyScansAlertThreshold].timestampAsDate(),\n                alertType: 'Too Many Scans',\n                itemId: records[0].itemId(),\n                count: records.length\n            }));\n    }\n}\n","export function gatewayImage(gatewayId: string): string {\n    return process.env.REACT_APP_BASE_URL + {\n        [\"3c71bf63e190\".toLowerCase()]: '/mixingcenter.svg',\n        [\"GW98f4ab141D14\".toLowerCase()]: '/factory.svg',\n        [\"GW984fab141D70\".toLowerCase()]: '/truck.svg', //\"P&G Truck\",\n        [\"GW98f4ab141D38\".toLowerCase()]: '/distributioncenter.svg',\n        [\"GW98f4ab141DF4\".toLowerCase()]: '/inventory.svg', //\"Customer DC or P&G DC Shelf\",\n        [\"GW98f4ab141D0C\".toLowerCase()]: '/retailstorage.svg',\n        [\"Original\".toLowerCase()]:  '/mixingcenter.svg',\n        [\"P&G Manufacturing\".toLowerCase()]:  '/factory.svg',\n        [\"P&G Truck\".toLowerCase()]:  '/truck.svg', //\"P&G Truck\",\n        [\"Customer DC or P&G DC\".toLowerCase()]:  '/distributioncenter.svg',\n        [\"Customer DC or P&G DC Shelf\".toLowerCase()]:  '/inventory.svg', //\"Customer DC or P&G DC Shelf\",\n        [\"P&G Customer Store\".toLowerCase()]:  '/retailstorage.svg',\n    }[gatewayId.toLowerCase()] || '/unknown_gateway.svg';\n}\n\nexport function partnerBrandImage(brand: string): string {\n    return process.env.REACT_APP_BASE_URL + {\n        'amazon': '/amazon.png',\n        'p&g': '/png.png',\n        'fedex': '/fedex.png',\n        'dhl': '/dhl.png'\n    }[brand.toLowerCase()] || '/unknown_brand.png';\n}\n\nexport function stageImage(stage: string): string {\n    return process.env.REACT_APP_BASE_URL + {\n        'factory': '/factory.svg',\n        'mixing': '/mixingcenter.svg',\n        'distribution': '/distributioncenter.svg',\n        'retail': '/retailstorage.svg'\n    }[stage.toLowerCase().replace(/\\s/g, \"\")] || '/unknown_stage.svg';\n}\n\n","import React from \"react\";\nimport * as _ from \"lodash\";\nimport {inject, observer} from \"mobx-react\";\nimport {Statistics} from \"./statistics\";\nimport {observable, reaction} from \"mobx\";\nimport {Button, CircularProgress, DialogTitle, TablePagination, TextField} from \"@material-ui/core\";\nimport {Autocomplete, createFilterOptions} from \"@material-ui/lab\";\nimport {gatewayImage, partnerBrandImage, stageImage} from \"./resources\";\nimport {ScanRecord, stagesDisplay} from \"./record\";\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nconst twodigits = (n:number) => (n < 10 ? '0' : '') + n.toString();\n\n@inject(\"statistics\")\n@observer\nexport class ItemStatusPage extends React.Component<{statistics: Statistics}, {}> {\n\n    @observable private selectedItemUID: string;\n    @observable private ready = false;\n    @observable private pageSize: number = 5;\n    @observable private currentPage: number = 0;\n    private currentTimeoutHandle;\n\n    get selected(): string {\n        return this.selectedItemUID != null ?\n            (\n                this.props.statistics.itemUIDs.indexOf(this.selectedItemUID) != -1 ?\n                    this.selectedItemUID\n                    :\n                    null\n            )\n            : this.props.statistics.itemUIDs[0];\n    }\n\n    componentDidMount() {\n        this.loadData();\n        reaction(\n            () => this.selected,\n            () => this.loadData()\n        )\n    }\n\n    loadData() {\n        const uid = this.selected;\n        if (uid) {\n            this.ready = false;\n            if (this.currentTimeoutHandle) {\n                clearTimeout(this.currentTimeoutHandle);\n            }\n            this.currentTimeoutHandle = setTimeout(() => {\n                this.ready = true;\n                this.currentTimeoutHandle = null;\n            }, 1000);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.currentTimeoutHandle) {\n            clearTimeout(this.currentTimeoutHandle);\n        }\n    }\n\n    render() {\n        const records = this.props.statistics.itemRecords(this.selected);\n        return <div style={{margin: \"30px\"}}>\n            <div style={{\n                display: 'flex',\n                alignItems: 'center'\n            }}>\n                <div style={{\n                    display: 'inline-block',\n                    fontWeight: 'bold',\n                    fontSize: 21,\n                    padding: '32px 15px 32px 0'\n                }}>Search an item:</div>\n                {/*<datalist id={\"items\"}>*/}\n                {/*    {this.props.statistics.itemUIDs.map(uid => <option value={uid}/>)}*/}\n                {/*</datalist>*/}\n                {/*<input value={this.selectedItemUID == null ? this.selected : this.selectedItemUID} onChange={e => this.selectedItemUID = e.target.value} list={\"items\"}/>*/}\n                {this.props.statistics.itemUIDs.length > 0 && <Autocomplete\n                    options={this.props.statistics.itemUIDs}\n                    getOptionLabel={option => option}\n                    style={{ width: 300}}\n                    filterOptions={createFilterOptions({\n                        matchFrom: 'start'\n                    })}\n                    onChange={(e, value) => {\n                        this.selectedItemUID = value;\n                        this.loadData();\n                    }}\n                    value={this.selectedItemUID == null ? this.selected : this.selectedItemUID}\n                    renderInput={params => <TextField {...params} label=\"Item UID\" variant=\"outlined\" />}\n                />}\n                {!this.ready && <CircularProgress style={{marginLeft: 20}}/>}\n            </div>\n            {this.selected != null && this.ready && <div style={{\n                borderRadius: 4,\n                border: \"solid 1px #ebedf8\",\n                backgroundColor: \"#f8f8f8\",\n                padding: 37,\n                display: 'flex',\n                flexDirection: 'row',\n                marginRight: 30,\n                overflow: \"auto\"\n            }}>\n                <div>\n                    <div style={{\n                        fontSize: 19,\n                        color: \"#1a173b\",\n                        letterSpacing: 0.13,\n                        paddingBottom: 12\n                    }}>\n                        Item UID\n                    </div>\n                    <div style={{\n                        color: \"#484848\",\n                        fontSize: 15\n                    }}>\n                        {this.selected}\n                    </div>\n                </div>\n                <div>\n                    <table className={\"item-table\"} style={{\n                        paddingLeft: 40\n                    }}>\n                        <tr style={{\n                            fontSize: 15,\n                            letterSpacing: 0.1,\n                            color: \"#5e6e7b\"\n                        }}>\n                            <td>Brand</td>\n                            <td>Description</td>\n                            <td>Catalog No.</td>\n                            <td>Time in pipeline</td>\n                            <td>Status</td>\n                        </tr>\n                        <tr style={{\n                            fontSize: 16,\n                            color: \"#060606\"\n                        }}>\n                            <td>Gillette</td>\n                            <td>Razor Package 135Xg</td>\n                            <td>1225434DLX</td>\n                            <td>{Math.floor(this.props.statistics.itemPipelineTimeInSeconds(this.selected) / 60 / 60 / 24)} days</td>\n                            <td style={{\n                                fontWeight: 'bold',\n                                fontSize: 16,\n                                color: '#769806'\n                            }}>OK</td>\n                        </tr>\n                    </table>\n                </div>\n            </div>}\n            {this.selected && this.ready && <div>\n                <div style={{\n                    display: 'inline-block',\n                    fontWeight: 'bold',\n                    fontSize: 21,\n                    padding: '32px 15px 32px 0',\n                    borderBottom: \"solid 0.5px #ebedf8\",\n                    width: \"100%\"\n                }}>Item history</div>\n                <div>\n                    <div className={'item-history-table'}>\n                        <table>\n                            <tr>\n                                <td></td>\n                                <td>Gateway</td>\n                                <td>Gateway ID</td>\n                                <td>Event Type</td>\n                                <td>Event Value</td>\n                                <td>Date</td>\n                                <td>Time</td>\n                            </tr>\n                            {\n                                _.sortBy(records, r => -r.timestampInSeconds()).slice(this.pageSize * this.currentPage, this.pageSize * (this.currentPage + 1))\n                                    .map(r => <tr>\n                                        <td className={'record-id-cell'}>Record {r.recordId()}</td>\n                                        <td style={{textAlign: 'left'}}>\n                                            <div style={{\n                                                verticalAlign: 'middle',\n                                                width: 30,\n                                                height: 30,\n                                                backgroundImage: `url(${gatewayImage(r.gatewayId())})`,\n                                                backgroundSize: 'contain',\n                                                backgroundRepeat: 'no-repeat',\n                                                whiteSpace: 'nowrap',\n                                                backgroundPosition: 'center',\n                                                display: 'inline-block'\n                                            }}/>\n                                            &nbsp;&nbsp;&nbsp;{r.gatewayAlias()}\n                                        </td>\n                                        <td> {r.gatewayId()} </td>\n                                        <td> {r.eventType()} </td>\n                                        <td> {r.eventValue()} </td>\n                                        <td>{`${twodigits(r.timestampAsDate().getDate())} ${r.timestampAsDate().toLocaleString('default', { month: 'short' })}, ${r.timestampAsDate().getFullYear()}`}</td>\n                                        <td>{`${twodigits(r.timestampAsDate().getHours())}:${twodigits(r.timestampAsDate().getMinutes())}`}</td>\n                                    </tr>)\n                            }\n                        </table>\n                        <TablePagination\n                            rowsPerPageOptions={[5, 10]}\n                            component=\"div\"\n                            count={records.length}\n                            rowsPerPage={this.pageSize}\n                            page={this.currentPage}\n                            onChangePage={(e, page) => this.currentPage = page}\n                            onChangeRowsPerPage={(e) => {\n                                this.pageSize = parseInt(e.target.value)\n                            }}\n                        />\n                        {this.isOperatorDialogOpen() && <Dialog onClose={() => this.closeOperatorDialog()} aria-labelledby=\"Scan Operator Details\" open={this.isOperatorDialogOpen()}>\n                            <div style={{fontSize: 20, fontWeight: 'bold', margin: 20}}>Scan Operator Details</div>\n                            <DialogContent style={{textAlign: 'left'}}>\n                                You are attempting to retrieve operator details of scan { this.scanRecordForOperatorRetreival.recordId() }.<br/><br/>\n                                <b>Note - this action will be logged!</b><br/><br/>\n                                <div style={{textAlign: 'center'}}>\n                                    {\n                                        this.retrievingDetails ? <CircularProgress/>\n                                        : !this.operatorDetails ? <Button variant=\"contained\" color=\"primary\" onClick={() => this.retreiveOperatorDetails()}>RETRIEVE OEPRATOR DETAILS</Button>\n                                            : <span>Full name: <b>{this.operatorDetails}</b></span>\n                                    }\n                                </div>\n                                <DialogActions>\n                                    <Button autoFocus onClick={() => this.closeOperatorDialog()} color=\"primary\" style={{marginTop: 20}}>\n                                        {this.operatorDetails ? 'DONE' : 'CANCEL'}\n                                    </Button>\n                                </DialogActions>\n                            </DialogContent>\n                        </Dialog>}\n                    </div>\n                </div>\n            </div>}\n        </div>\n    }\n\n    @observable retrievingDetails = false;\n    @observable operatorDetails = null;\n\n    private retreiveOperatorDetails() {\n        this.retrievingDetails = true;\n        setTimeout(() => {\n            this.retrievingDetails = false;\n            this.operatorDetails = this.scanRecordForOperatorRetreival.operatorFullName();\n        }, 3000)\n    }\n\n    @observable scanRecordForOperatorRetreival: ScanRecord;\n\n    private openOperatorRetreivalDialog(r: ScanRecord) {\n        this.scanRecordForOperatorRetreival = r;\n    }\n\n    private closeOperatorDialog() {\n        this.scanRecordForOperatorRetreival = null;\n        this.operatorDetails = null;\n    }\n\n    private isOperatorDialogOpen(): boolean {\n        return this.scanRecordForOperatorRetreival != null;\n    }\n}\n","import * as _ from \"lodash\";\nimport React from \"react\";\n\nconst scale = 0.6;\n\nclass Bar extends React.Component<{\n                 label: string,\n                 value: number,\n                 color: string,\n                 image: string,\n                 percent: number\n             }, {}> {\n\n    toRunOnMount = [];\n\n    componentDidMount() {\n        const fs = this.toRunOnMount;\n        this.toRunOnMount = null;\n        fs.forEach(f => f());\n    }\n\n    runOnMount(f) {\n        if (this.toRunOnMount == null) {\n            f();\n        } else {\n            this.toRunOnMount.push(f);\n        }\n    }\n\n    render() {\n        const {label, value, color, image, percent} = this.props;\n\n        return <div style={{\n            display: 'flex',\n            flexDirection: 'column',\n            margin: \"0 3px\"\n        }}>\n            <div\n                style={{flex: 1, display: \"flex\", flexDirection: \"column\", alignContent: 'flex-end', paddingBottom: 5}}>\n                <div style={{flex: 1}}/>\n                <div style={{textAlign: 'center', fontSize: 40 * scale, paddingBottom: 3}}>{value}</div>\n                <div style={{\n                    backgroundColor: color,\n                    height: 0,\n                    transition: 'height 1s'\n                }} ref={e => this.runOnMount(() => {\n                    setTimeout(() => {\n                        if (e) e.style.height = `${Math.ceil(percent * 100)}%`\n                    }, 10);\n                })}/>\n            </div>\n            <div style={{\n                height: 124 * scale + 10,\n                width: 134 * scale,\n                backgroundColor: \"#e9e9e9\",\n                boxSizing: 'border-box',\n                display: 'flex',\n                flexDirection: 'column',\n                fontSize: 16 * scale,\n                color: \"#060606\",\n                alignItems: 'center'\n            }}>\n                <div style={{\n                    height: 70 * scale,\n                    minHeight: 70 * scale,\n                    width: 70 * scale,\n                    minWidth: 70 * scale,\n                    marginTop: 20 * scale,\n                    backgroundImage: `url(${image})`,\n                    backgroundPosition: 'center',\n                    backgroundRepeat: 'no-repeat',\n                    backgroundSize: 'contain',\n                }}/>\n                <span style={{\n                    textAlign: 'center',\n                    paddingTop: 5,\n                    paddingBottom: 20 * scale,\n                    wordBreak: 'break-word'\n                }}>{label}</span>\n            </div>\n        </div>\n    }\n}\n\nexport class BarChart extends React.Component<{\n    labels: string[],\n    values: number[],\n    colors: string[],\n    images: string[]\n}, {}> {\n\n    render() {\n        const {labels, values, colors, images} = this.props;\n        const maxValue = _.max(values);\n        return <div style={{\n            width: '100%',\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'center'\n        }}>\n            {labels.map(\n                (l, i) => <Bar\n                    label={labels[i]}\n                    value={values[i]}\n                    image={images[i]}\n                    color={colors[i % colors.length]}\n                    percent={maxValue == 0 ? 0 : values[i] / maxValue}\n                />\n            )}\n            {/*{[labels[0], labels[1], labels[2], labels[3]].map(*/}\n            {/*    (l, i) => <Bar*/}\n            {/*        label={labels[i]}*/}\n            {/*        value={values[i]}*/}\n            {/*        image={images[i]}*/}\n            {/*        color={colors[i % colors.length]}*/}\n            {/*        percent={maxValue == 0 ? 0 : values[i] / maxValue}*/}\n            {/*    />*/}\n            {/*)}*/}\n        </div>\n    }\n\n}\n","import React from \"react\";\nimport * as _ from 'lodash';\nimport {inject, observer} from \"mobx-react\";\nimport {\n    AdjacentScansAlertThresholdMs, IAdjacentScansAlert,\n    IAlert,\n    IRepeatedScanAlert,\n    ITooManyScansAlert,\n    Statistics,\n    TooManyScansAlertThreshold\n} from \"./statistics\";\nimport {BarChart} from \"./bar-chart\";\nimport {observable, toJS} from \"mobx\";\nimport {gatewayImage, partnerBrandImage, stageImage} from \"./resources\";\nimport {TablePagination} from \"@material-ui/core\";\nimport {stages, stagesDisplay} from \"./record\";\n\n@observer\nclass Databox extends React.Component<{\n    title: string,\n    data: number\n    subText?: string\n    decimals?: number\n}, {}> {\n\n    @observable initDisplayedData: number = 0;\n    @observable finalDisplayedData: number = null;\n    @observable initial = true;\n\n    mounted = false;\n\n    format(v: number): string {\n        if (this.props.decimals) {\n            return `${Math.floor(v)}.${Math.floor(v * 10) % 10}`;\n        } else {\n            return `${v}`\n        }\n    }\n\n    componentDidMount() {\n        this.mounted = true;\n        const duration = 1000;\n        const data = this.props.data || 0;\n        const mountedAt = Date.now();\n        const update = () => {\n            if (this.mounted) {\n                const delta = Date.now() - mountedAt;\n                if (delta < duration) {\n                    this.initDisplayedData = Math.floor(data * (delta / duration));\n                    requestAnimationFrame(update);\n                } else {\n                    this.finalDisplayedData = data;\n                    this.initial = false;\n                }\n            }\n        };\n        update();\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n\n    componentDidUpdate() {\n        this.finalDisplayedData = this.props.data;\n    }\n\n    render() {\n        return <div className={'databox'}>\n            <div className={'databox-title'}>{this.props.title}</div>\n            <div className={'databox-infotext'}>\n                <span>{this.format(this.initial ? this.initDisplayedData : this.finalDisplayedData)}</span>\n                {this.props.subText &&\n                    <div className={'databox-subtext'}>\n                        <span>{this.props.subText}</span>\n                    </div>\n                }\n            </div>\n        </div>\n    }\n\n}\n\n@inject('statistics')\n@observer\nexport class OverviewPage extends React.Component<{\n    statistics: Statistics\n}, {}> {\n    @observable private rowsPerPage: number = 5;\n    @observable private page: number = 0;\n    render() {\n        const byGateway = this.props.statistics.itemCountByGatewayAlias;\n        const gateways = _.reverse(Object.keys(toJS(byGateway)).sort());\n        return <div style={{\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'row',\n            flexWrap: 'wrap',\n            justifyContent: 'center',\n        }}>\n            <div style={{display: 'flex', flexDirection:'column', flex: 1, borderRight: '1px solid #ebedf8'}}>\n                <div style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    flexWrap: 'wrap'\n                }}>\n                    <div style={{flex: 1, marginTop: 50}}>\n                        <div className=\"title\" style={{\n                            height: 46,\n                            borderBottom: '1px solid #ebedf8',\n                            alignItems: 'start'\n                        }}>\n                            <span>Products by gateway</span>\n                        </div>\n                        <div style={{height: 300, padding: 20, borderBottom: '1px solid #ebedf8'}}>\n                            <BarChart\n                                colors={[\"#035093\", \"#035093\", \"#4889c2\", \"#0a4171\"]}\n                                images={gateways.map(gateway => gatewayImage(gateway))}\n                                labels={gateways}\n                                values={gateways.map(gateway => byGateway[gateway])}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div style={{\n                letterSpacing: 1.13,\n                fontSize: 19,\n            }}>\n                {this.renderDataSection()}\n            </div>\n        </div>\n    }\n\n    private renderDataSection() {\n        const {statistics} = this.props;\n        return <div style={{\n            width: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center'\n        }}>\n            <div className={\"title\"} style={{\n                height: 96,\n                width: '100%',\n                borderBottom: '1px solid #ebedf8',\n            }}><span style={{marginTop: 22}}>Data</span></div>\n            <div style={{margin:\"30px 30px 0 30px\"}}>\n                <table className={'data-table'}>\n                    <tr>\n                        <td className={'border-right border-bottom'}><Databox title={\"Alerted Products\"} data={statistics.alertedItems.length}/></td>\n                        <td className={'border-left border-bottom'}><Databox title={\"Avg. Time in pipeline\"} data={statistics.avgPiplineTimePerItemInDays} subText={\"DAYS\"} decimals={1}/></td>\n                    </tr>\n                    <tr>\n                        <td className={'border-right border-top'}><Databox title={\"Suspected counterfeit\"} data={0}/></td>\n                        <td className={'border-left border-top'}><Databox title={\"Avg. scans per item\"} data={statistics.avgRecordsPerItem} decimals={1}/></td>\n                    </tr>\n                </table>\n                <div style={{\n                    borderBottom: \"1px solid #ebedf8\",\n                    height: 0\n                }}/>\n                <div style={{\n                    fontSize: 16,\n                    color: '#060606',\n                    margin: '40px 0 40px'\n                }}>\n                    Items Location\n                </div>\n                <img src={process.env.REACT_APP_BASE_URL + \"/worldmap.svg\"} style={{width: '100%'}} alt=\"Route tracking\"/>\n            </div>\n        </div>\n    }\n}\n","import {ItemStatusPage} from \"./item-status-page\";\nimport {OverviewPage} from \"./overview-page\";\n\ntype RouteName = \"itemStatus\" | \"overview\";\n\nexport interface IRoute {\n  name: RouteName;\n  displayIndex: number;\n  cssClass: string;\n  path: string,\n  menuImg: string\n  component;\n}\n\nexport const routes: IRoute[] = [\n  {\n    name: 'itemStatus',\n    path: '/item_status',\n    menuImg: '/menu-item-status.svg',\n    cssClass: 'item-status',\n    displayIndex: 1,\n    component: ItemStatusPage\n  },\n  { // must be last\n    name: 'overview',\n    path: '/',\n    menuImg: '/menu-overview.svg',\n    cssClass: 'overview',\n    displayIndex: 0,\n    component: OverviewPage\n  }\n];\n\n\nexport function getCurrentRoute(): IRoute {\n  return routes.find(r => r.path == window.location.hash.slice(1)) || routes[routes.length - 1];\n}\n\nexport function getRoute(name: RouteName): IRoute {\n  return routes.find(r => r.name == name);\n}\n","import * as _ from 'lodash';\n\nimport React from \"react\";\nimport {getCurrentRoute, IRoute, routes} from \"./routes\";\nimport {observer} from \"mobx-react\";\nimport {observable} from \"mobx\";\n\nfunction Link({onClick, className}) {\n    return <div onClick={() => onClick()} style={{width: '100%', boxSizing: 'border-box', margin: 30}} className={className}/>;\n}\n\n@observer\nexport class SideMenu extends React.Component<{},{}> {\n\n    @observable currentRoute = getCurrentRoute();\n\n    render() {\n        const className = (route: IRoute) => {\n            return `menu-item menu-item-${route.cssClass} ${this.currentRoute.name == route.name ? 'selected' : ''}`\n        };\n\n        return <div className=\"side-menu\" style={{height: '100%', width: '100%'}}>\n            <style dangerouslySetInnerHTML={{__html:`\n                .side-menu .menu-item-overview {\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-overview.svg);\n                }\n\n                .side-menu .menu-item-overview.selected{\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-overview-selected.svg);\n                    border-right: 3px solid #3e4d73;\n                }\n\n                .side-menu .menu-item-overview:hover{\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-overview-hovered.svg);\n                }\n\n                .side-menu .menu-item-item-status {\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-item-status.svg);\n                }\n\n                .side-menu .menu-item-item-status.selected{\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-item-status-selected.svg);\n                    border-right: 3px solid #3e4d73;\n                }\n\n                .side-menu .menu-item-item-status:hover{\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-item-status-hovered.svg);\n                }\n            `}}/>\n            <div className='side-menu-orbs' style={{padding: 30, marginBottom: 20}}>\n                <img style={{height: 32, width:32}} src={process.env.REACT_APP_BASE_URL + '/orbs-logo.svg'}/>\n            </div>\n            {\n                _.sortBy(routes, r => r.displayIndex).map(\n                    route => <Link\n                        onClick={() => this.navigateTo(route)}\n                        className={className(route)}\n                    />\n                )\n            }\n        </div>\n    }\n\n    navigateTo(route: IRoute) {\n        window.location.hash = route.path;\n        this.currentRoute = route;\n    }\n\n    componentDidMount(): void {\n        window.onhashchange = () => this.currentRoute = getCurrentRoute();\n    }\n\n    componentWillUnmount(): void {\n        window.onhashchange = null;\n    }\n}\n","import React from \"react\";\nimport * as _ from \"lodash\";\nimport {observer} from \"mobx-react\";\nimport {observable} from \"mobx\";\n\n@observer\nexport class LoadingPage extends React.Component<{}, {}> {\n\n    @observable loadingCaption = \"Loading...\";\n\n    render() {\n        return <div className={\"loading-page\"}>\n            <div className={\"logo-container\"}>\n                <div style={{\n                    height: '100%',\n                    width: '100%',\n                    textAlign: 'center'\n                }}><img className={\"orbs-logo\"} src={process.env.REACT_APP_BASE_URL + \"/orbs-logo.svg\"}/></div>\n                <div className={\"loading-lbl\"}>{this.loadingCaption}</div>\n            </div>\n        </div>\n    }\n\n    componentDidMount() {\n        let i = 0;\n        setInterval(() => {\n            this.loadingCaption = \"Loading\" + _.range(i).map(() => '.').join('');\n            i = (i + 1) % 4;\n        }, 500)\n    }\n}\n","import React from \"react\";\nimport {Alert, AlertTitle} from \"@material-ui/lab\";\n\n\nexport class ErrorPage extends React.Component<{err: Error}, {}> {\n\n    render() {\n        return <div style={{display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100%', textAlign: 'left'}}>\n            <Alert severity=\"error\">\n                <AlertTitle>Error</AlertTitle>\n                We were unable to load the page at the moment. Please try again. <br/>\n                <span style={{color: \"#bebebe\"}}><pre>Error: {this.props.err.toString()}</pre></span>\n            </Alert>\n        </div>\n    }\n\n}\n","import * as _ from 'lodash';\nimport React from 'react';\nimport {inject, observer} from \"mobx-react\";\nimport {RecordStore} from \"./record-store\";\nimport {BrowserRouter, Switch, Route, HashRouter} from 'react-router-dom';\nimport {routes} from \"./routes\";\nimport {SideMenu} from \"./side-menu\";\nimport {ItemStatusPage} from \"./item-status-page\";\nimport {OverviewPage} from \"./overview-page\";\nimport {LoadingPage} from \"./loading-page\";\nimport {ErrorPage} from \"./error-page\";\n\n\n@inject('records')\n@observer\nexport class App extends React.Component<{\n  records?: RecordStore\n},{}> {\n  render() {\n    return this.props.records.ready ? <HashRouter>\n      <div style={{height: '100%', width: '100%', maxWidth: 2000, display: \"inline-block\", position: 'relative', textAlign: 'left'}}>\n        <div style={{position: 'absolute', top: 0, left: 0, bottom: 0, width: 89}}>\n          <SideMenu/>\n        </div>\n        <div style={{position: 'absolute', top: 0, left: 90, bottom: 0, right:0, overflow: 'auto', borderRight: \"1px solid #ebedf8\"}}>\n            <Switch>\n              {\n                routes.map(route => {\n                  const PageComponent = route.component;\n                  return <Route path={route.path}>\n                    <PageComponent/>\n                  </Route>\n                })\n              }\n            </Switch>\n        </div>\n      </div>\n    </HashRouter>\n            : this.props.records.err ? <ErrorPage err={this.props.records.err}/>\n            : <LoadingPage/>\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"mobx-react\";\nimport {createStores} from \"./stores\";\nimport {App} from \"./App\";\n\nconst stores = createStores();\n(window as any).stores = stores;\n\nReactDOM.render(\n    <Provider {...stores}>\n        <App/>\n    </Provider>\n    ,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n","import {RecordStore} from \"./record-store\";\nimport {Statistics} from \"./statistics\";\n\nexport interface IStores {\n    records: RecordStore;\n    statistics: Statistics;\n}\n\nexport function createStores(): IStores {\n    const records = new RecordStore();\n    return {\n        records,\n        statistics: new Statistics(records)\n    }\n}\n"],"sourceRoot":""}