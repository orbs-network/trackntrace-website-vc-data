{"version":3,"sources":["serviceWorker.ts","names.ts","record.ts","record-store.ts","statistics.ts","resources.ts","item-status-page.tsx","bar-chart.tsx","overview-page.tsx","routes.ts","side-menu.tsx","loading-page.tsx","error-page.tsx","App.tsx","index.tsx","stores.ts"],"names":["Boolean","window","location","hostname","match","names","stages","stagesDisplay","Factory","Mixing","Distribution","Retail","hashCode","s","Math","abs","split","reduce","a","b","charCodeAt","ScanRecord","raw","this","ProductID","timestampInMilliseconds","EventTimeUTCMS","Date","BusinessParty","find","stage","BusinessLocationID","toLowerCase","replace","includes","JSON","stringify","toString","partner","h","recordId","lastName","length","RecordStore","pollingIntervalMs","init","now","fetch","delay","max","setTimeout","ready","f","err","process","REACT_APP_RECORDS_URL","res","json","records","filter","r","msg","EventTimeUTC","map","observable","Statistics","recordsStore","item","_","itemRecords","timestampInSeconds","itemId","groupBy","values","pRecs","mean","value","avgPiplineTimePerItemInSeconds","mapValues","recs","n","uniq","latestRecordsPerItem","repeatedScanAlerts","concat","tooManyScansAlerts","adjacentScansAlert","alerts","itemUIDs","uid","seenAt","itemRecordsSortedByTime","i","rec","loc","prev","push","timestamp","timestampAsDate","alertType","prevTime","delta","deltaInMs","count","computed","partnerBrandImage","brand","stageImage","twodigits","ItemStatusPage","inject","observer","currentTimeoutHandle","loadData","reaction","selected","clearTimeout","props","statistics","style","margin","display","alignItems","fontWeight","fontSize","padding","Autocomplete","options","getOptionLabel","option","width","filterOptions","createFilterOptions","matchFrom","onChange","e","selectedItemUID","renderInput","params","TextField","label","variant","CircularProgress","marginLeft","borderRadius","border","backgroundColor","flexDirection","marginRight","overflow","color","letterSpacing","paddingBottom","className","paddingLeft","floor","itemPipelineTimeInSeconds","borderBottom","slice","pageSize","currentPage","textAlign","verticalAlign","height","backgroundImage","backgroundSize","backgroundRepeat","whiteSpace","backgroundPosition","src","getDate","toLocaleString","month","getFullYear","getHours","getMinutes","isOperatorAvailable","IconButton","onClick","openOperatorRetreivalDialog","TablePagination","rowsPerPageOptions","component","rowsPerPage","page","onChangePage","onChangeRowsPerPage","parseInt","target","isOperatorDialogOpen","Dialog","onClose","closeOperatorDialog","aria-labelledby","open","DialogContent","scanRecordForOperatorRetreival","retrievingDetails","operatorDetails","Button","retreiveOperatorDetails","DialogActions","autoFocus","marginTop","operatorFullName","indexOf","React","Component","Bar","toRunOnMount","fs","forEach","image","percent","flex","alignContent","transition","ref","runOnMount","ceil","boxSizing","minHeight","minWidth","paddingTop","wordBreak","BarChart","labels","colors","images","maxValue","justifyContent","l","Databox","mounted","v","decimals","data","mountedAt","update","initDisplayedData","requestAnimationFrame","finalDisplayedData","initial","title","format","subText","routes","name","path","menuImg","cssClass","displayIndex","byPartner","itemCountByPartner","partners","Object","keys","toJS","sort","byStage","itemCountByStage","repeatedScanAlertsCount","tooManyAlertsCount","adjacentScansAlertsCount","alertCount","flexWrap","borderRight","alt","AdjacentScansAlertThresholdMs","alert","getTime","toDateString","renderDataSection","alertedItems","avgPiplineTimePerItemInDays","avgRecordsPerItem","getCurrentRoute","hash","Link","SideMenu","route","currentRoute","dangerouslySetInnerHTML","__html","marginBottom","navigateTo","onhashchange","LoadingPage","loadingCaption","setInterval","join","ErrorPage","Alert","severity","AlertTitle","App","maxWidth","position","top","left","bottom","right","PageComponent","stores","createStores","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.910b6c06.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const names = [\"Clere\", \"Edbert\", \"Kareem\", \"Topper\", \"Busey\", \"Woody\", \"Ikkela\", \"Jenesia\", \"Deirdre\", \"Bloom\", \"Ellwood\", \"Burget\", \"Carnay\", \"Karlotte\", \"Vins\", \"Obau\", \"Adoree\", \"Jensen\", \"Lemuela\", \"Nahum\", \"Eskill\", \"Deeanne\", \"Hayes\", \"Meridel\", \"Flemming\", \"Eldwin\", \"Om\", \"Weisbrodt\", \"Scheer\", \"Carlen\", \"Armalda\", \"Schindler\", \"Rahman\", \"Tolley\", \"Sherwin\", \"Avelin\", \"Xever\", \"Lanny\", \"Jedidiah\", \"Dorie\", \"Madalena\", \"Langston\", \"Halle\", \"Ileana\", \"Hunley\", \"Juieta\", \"Ngo\", \"Lubet\", \"Marlene\", \"Ruthanne\", \"Stover\", \"Decca\", \"Marrin\", \"Taite\", \"Mae\", \"Wester\", \"Bricker\", \"Prissy\", \"Eadith\", \"Zacharie\", \"Malarkey\", \"Prakash\", \"Eichman\", \"Helbonnas\", \"Truc\", \"Horatia\", \"McConnell\", \"Stanhope\", \"Lathan\", \"Hax\", \"Erick\", \"Denney\", \"Faludi\", \"Cherry\", \"Keefer\", \"Jarib\", \"Ahrens\", \"Olwen\", \"Farris\", \"Bibbie\", \"Mont\", \"Sunil\", \"McNalley\", \"Girovard\", \"Schreibe\", \"Kilgore\", \"Stevana\", \"Gabler\", \"Phillida\", \"Putnam\", \"Biagi\", \"Neau\", \"Katherin\", \"Sedgewake\", \"Eisler\", \"Cyrille\", \"Uri\", \"Tammany\", \"Hagar\", \"Amby\"]\n","import {names} from \"./names\";\n\nexport type Stage = 'Factory' | 'Mixing' | 'Distribution' | 'Retail';\nexport const stages: Stage[] = ['Factory', 'Mixing', 'Distribution', 'Retail'];\nexport const stagesDisplay: {[stage in Stage]: string} = {\n    Factory: 'Factory',\n    Mixing: 'Mixing Center',\n    Distribution: 'Distribution Center',\n    Retail: 'Retail'\n}\n\nexport interface IRawScanRecord {\n    ProductID: string,\n    EventTimeUTC: string,\n    BusinessParty: string,\n    EventTimeUTCMS: number,\n    BusinessLocationID: string,\n    EventTimeZoneOffsetMS: number\n}\n\nconst hashCode = s => Math.abs(s.split('').reduce((a,b)=>{a=((a<<5)-a)+b.charCodeAt(0);return a&a},0));\n\nexport class ScanRecord {\n    constructor(public raw: IRawScanRecord) {}\n\n    itemId(): string {\n        return this.raw.ProductID;\n    }\n\n    timestampInSeconds(): number {\n        return this.timestampInMilliseconds() / 1000;\n    }\n\n    timestampInMilliseconds(): number {\n        return this.raw.EventTimeUTCMS;\n    }\n\n    timestampAsDate(): Date {\n        return new Date(this.timestampInMilliseconds());\n    }\n\n    partner(): string {\n        return this.raw.BusinessParty\n    }\n\n    stage(): Stage|string {\n        return stages.find(stage => this.raw.BusinessLocationID.toLowerCase().replace(/\\s/g, \"\")\n            .includes(stage.toLowerCase().replace(/\\s/g, \"\"))) || this.raw.BusinessLocationID;\n    }\n\n    recordId(): string {\n        // TODO - get from server\n        return hashCode(JSON.stringify(this.raw)).toString();\n    }\n\n    location(): string {\n        return this.raw.BusinessLocationID;\n    }\n\n    isOperatorAvailable(): boolean {\n        return this.partner().toLowerCase() == 'p&g';\n    }\n\n    operatorFullName(): string {\n        const h = hashCode(this.recordId());\n        const firstName = names[h % names.length];\n        const lastName = names[(h+1) % names.length];\n        return `${firstName} ${lastName}`;\n    }\n}\n","import {observable} from \"mobx\";\nimport {IRawScanRecord, ScanRecord} from \"./record\";\n\nexport class RecordStore {\n\n    @observable ready = false;\n    @observable err: Error = null;\n\n    @observable records: ScanRecord[] = [];\n\n    constructor(pollingIntervalMs = 500) {\n        this.init(pollingIntervalMs)\n    }\n\n    private async init(pollingIntervalMs: number) {\n        try {\n            const now = Date.now();\n            await this.fetch();\n            const delay = Math.max(0, 800 - (Date.now() - now));\n            setTimeout(() => this.ready = true, delay);\n\n            const f = async () => {\n                try {\n                    await this.fetch();\n                    setTimeout(f, pollingIntervalMs)\n                } catch (e) {\n                    this.err = e;\n                }\n            };\n            f();\n        } catch (e) {\n            this.err = e;\n        }\n    }\n\n    public async fetch() {\n        const res = await fetch(process.env.REACT_APP_RECORDS_URL || \"https://png-collector.herokuapp.com/getAllEvents\");\n        const records: IRawScanRecord[] = await res.json();\n\n        if (this.records == null || records.length != this.records.length) {\n            this.records = records\n                .filter(r => (r as any).msg != \"[object Object]\")\n                .filter(r => r.EventTimeUTC != null)\n                .map(raw => new ScanRecord(raw));\n        }\n    }\n}\n","import {RecordStore} from \"./record-store\";\nimport * as _ from \"lodash\";\nimport {computed} from \"mobx\";\nimport {ScanRecord} from \"./record\";\n\nexport type AlertType = 'Repeated Scan' | 'Too Many Scans' | 'Adjacent Scans';\nexport interface IAlert {\n    timestamp: Date,\n    alertType: AlertType,\n    itemId: string,\n    // description: string\n}\n\nexport interface IRepeatedScanAlert extends IAlert {\n    location: string,\n    prevTime: Date\n}\n\nexport interface ITooManyScansAlert extends IAlert {\n    count: number\n}\nexport const TooManyScansAlertThreshold = 10;\n\nexport interface IAdjacentScansAlert extends IAlert {\n    deltaInMs: number\n}\nexport const AdjacentScansAlertThresholdMs = 15 * 60 * 1000;\n\nexport class Statistics {\n\n    constructor(public recordsStore: RecordStore) {}\n\n    @computed get avgRecordsPerItem(): number {\n        return _.chain(this.recordsStore.records)\n            .groupBy(r => r.itemId())\n            .values()\n            .map((pRecs: ScanRecord[]) => pRecs.length)\n            .mean()\n            .value() || 0\n    }\n\n    @computed get avgPiplineTimePerItemInDays(): number {\n        return this.avgPiplineTimePerItemInSeconds / 60 / 60 / 24;\n    }\n\n    @computed get avgPiplineTimePerItemInSeconds(): number {\n        const now = Date.now() / 1000;\n        return _.chain(this.recordsStore.records)\n            .groupBy(r => r.itemId())\n            .mapValues((recs: ScanRecord[]) => now - _.min(recs.map(r => r.timestampInSeconds())))\n            .map(n => Math.max(n, 0))\n            .mean()\n            .value() || 0;\n    }\n\n    itemPipelineTimeInSeconds(item: string): number {\n        const now = Date.now() / 1000;\n        return now - _.min(this.itemRecords(item).map(r => r.timestampInSeconds()));\n    }\n\n    @computed get itemUIDs(): string[] {\n        return _.chain(this.recordsStore.records)\n            .map(r => r.itemId())\n            .uniq()\n            .value();\n    }\n\n    @computed get latestRecordsPerItem(): ScanRecord[] {\n        return _.chain(this.recordsStore.records)\n            .groupBy(r => r.itemId())\n            .mapValues((recs: ScanRecord[]) => _.maxBy(recs, (r: ScanRecord) => r.timestampInSeconds()))\n            .values()\n            .value()\n    }\n\n    public itemRecords(itemId: string): ScanRecord[] {\n        return this.recordsStore.records.filter(r => r.itemId() == itemId);\n    }\n\n    public itemRecordsSortedByTime(itemId: string): ScanRecord[] {\n        return _.sortBy(this.itemRecords(itemId), r => r.timestampInMilliseconds());\n    }\n\n    @computed get itemCountByPartner(): {[partnerName: string]: number} {\n        return _.chain(this.latestRecordsPerItem)\n            .groupBy(r => r.partner())\n            .mapValues(recs => recs.length)\n            .value()\n    }\n\n    @computed get itemCountByStage(): {[partnerName: string]: number} {\n        return _.chain(this.latestRecordsPerItem)\n            .groupBy(r => r.stage())\n            .mapValues(recs => recs.length)\n            .value()\n    }\n\n    @computed get alerts(): IAlert[] {\n        return (this.repeatedScanAlerts as IAlert[])\n            .concat(this.tooManyScansAlerts)\n            .concat(this.adjacentScansAlert);\n    }\n\n    @computed get alertedItems(): string[] {\n        return _.uniq(this.alerts.map(a => a.itemId));\n    }\n\n    @computed get repeatedScanAlerts(): IRepeatedScanAlert[] {\n        const alerts: IRepeatedScanAlert[] = [];\n        for (const uid of this.itemUIDs) {\n            const seenAt = {};\n            const records = this.itemRecordsSortedByTime(uid);\n            for (let i = 0; i < records.length; i++) {\n                const rec = records[i];\n                const loc = rec.location();\n                if (seenAt[loc] != null && seenAt[loc] < i - 1) {\n                    const prev = records[seenAt[loc]];\n                    alerts.push({\n                        timestamp: rec.timestampAsDate(),\n                        alertType: 'Repeated Scan',\n                        itemId: rec.itemId(),\n                        location: rec.location(),\n                        prevTime: prev.timestampAsDate()\n                    });\n                    break;\n                }\n                seenAt[rec.location()] = i;\n            }\n        }\n        return alerts;\n    }\n\n    @computed get adjacentScansAlert(): IAdjacentScansAlert[] {\n        const alerts: IAdjacentScansAlert[] = [];\n        for (const uid of this.itemUIDs) {\n            const records = this.itemRecordsSortedByTime(uid);\n            for (let i = 1; i < records.length; i++) {\n                const rec = records[i];\n                const delta = (records[i].timestampInMilliseconds() - records[i - 1].timestampInMilliseconds());\n                if (records[i].location() != records[i - 1].location() && delta < AdjacentScansAlertThresholdMs) {\n                    alerts.push({\n                        timestamp: rec.timestampAsDate(),\n                        alertType: 'Adjacent Scans',\n                        itemId: rec.itemId(),\n                        deltaInMs: delta\n                    });\n                    break;\n                }\n            }\n        }\n        return alerts;\n    }\n\n    @computed get tooManyScansAlerts(): ITooManyScansAlert[] {\n        return this.itemUIDs\n            .map(uid => this.itemRecordsSortedByTime(uid))\n            .filter(records => records.length > TooManyScansAlertThreshold)\n            .map(records => ({\n                timestamp: records[TooManyScansAlertThreshold].timestampAsDate(),\n                alertType: 'Too Many Scans',\n                itemId: records[0].itemId(),\n                count: records.length\n            }));\n    }\n}\n","export function partnerBrandImage(brand: string): string {\n    return process.env.REACT_APP_BASE_URL + {\n        'amazon': '/amazon.png',\n        'p&g': '/png.png',\n        'fedex': '/fedex.png',\n        'dhl': '/dhl.png'\n    }[brand.toLowerCase()] || '/unknown_brand.png';\n}\n\nexport function stageImage(stage: string): string {\n    return process.env.REACT_APP_BASE_URL + {\n        'factory': '/factory.svg',\n        'mixing': '/mixingcenter.svg',\n        'distribution': '/distributioncenter.svg',\n        'retail': '/retailstorage.svg'\n    }[stage.toLowerCase().replace(/\\s/g, \"\")] || '/unknown_stage.svg';\n}\n\n","import React from \"react\";\nimport * as _ from \"lodash\";\nimport {inject, observer} from \"mobx-react\";\nimport {Statistics} from \"./statistics\";\nimport {observable, reaction} from \"mobx\";\nimport {Button, CircularProgress, DialogTitle, TablePagination, TextField} from \"@material-ui/core\";\nimport {Autocomplete, createFilterOptions} from \"@material-ui/lab\";\nimport {partnerBrandImage, stageImage} from \"./resources\";\nimport {ScanRecord, stagesDisplay} from \"./record\";\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nconst twodigits = (n:number) => (n < 10 ? '0' : '') + n.toString();\n\n@inject(\"statistics\")\n@observer\nexport class ItemStatusPage extends React.Component<{statistics: Statistics}, {}> {\n\n    @observable private selectedItemUID: string;\n    @observable private ready = false;\n    @observable private pageSize: number = 5;\n    @observable private currentPage: number = 0;\n    private currentTimeoutHandle;\n\n    get selected(): string {\n        return this.selectedItemUID != null ?\n            (\n                this.props.statistics.itemUIDs.indexOf(this.selectedItemUID) != -1 ?\n                    this.selectedItemUID\n                    :\n                    null\n            )\n            : this.props.statistics.itemUIDs[0];\n    }\n\n    componentDidMount() {\n        this.loadData();\n        reaction(\n            () => this.selected,\n            () => this.loadData()\n        )\n    }\n\n    loadData() {\n        const uid = this.selected;\n        if (uid) {\n            this.ready = false;\n            if (this.currentTimeoutHandle) {\n                clearTimeout(this.currentTimeoutHandle);\n            }\n            this.currentTimeoutHandle = setTimeout(() => {\n                this.ready = true;\n                this.currentTimeoutHandle = null;\n            }, 1000);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.currentTimeoutHandle) {\n            clearTimeout(this.currentTimeoutHandle);\n        }\n    }\n\n    render() {\n        const records = this.props.statistics.itemRecords(this.selected);\n        return <div style={{margin: \"30px\"}}>\n            <div style={{\n                display: 'flex',\n                alignItems: 'center'\n            }}>\n                <div style={{\n                    display: 'inline-block',\n                    fontWeight: 'bold',\n                    fontSize: 21,\n                    padding: '32px 15px 32px 0'\n                }}>Search an item:</div>\n                {/*<datalist id={\"items\"}>*/}\n                {/*    {this.props.statistics.itemUIDs.map(uid => <option value={uid}/>)}*/}\n                {/*</datalist>*/}\n                {/*<input value={this.selectedItemUID == null ? this.selected : this.selectedItemUID} onChange={e => this.selectedItemUID = e.target.value} list={\"items\"}/>*/}\n                {this.props.statistics.itemUIDs.length > 0 && <Autocomplete\n                    options={this.props.statistics.itemUIDs}\n                    getOptionLabel={option => option}\n                    style={{ width: 300}}\n                    filterOptions={createFilterOptions({\n                        matchFrom: 'start'\n                    })}\n                    onChange={(e, value) => {\n                        this.selectedItemUID = value;\n                        this.loadData();\n                    }}\n                    value={this.selectedItemUID == null ? this.selected : this.selectedItemUID}\n                    renderInput={params => <TextField {...params} label=\"Item UID\" variant=\"outlined\" />}\n                />}\n                {!this.ready && <CircularProgress style={{marginLeft: 20}}/>}\n            </div>\n            {this.selected != null && this.ready && <div style={{\n                borderRadius: 4,\n                border: \"solid 1px #ebedf8\",\n                backgroundColor: \"#f8f8f8\",\n                padding: 37,\n                display: 'flex',\n                flexDirection: 'row',\n                marginRight: 30,\n                overflow: \"auto\"\n            }}>\n                <div>\n                    <div style={{\n                        fontSize: 19,\n                        color: \"#1a173b\",\n                        letterSpacing: 0.13,\n                        paddingBottom: 12\n                    }}>\n                        Item UID\n                    </div>\n                    <div style={{\n                        color: \"#484848\",\n                        fontSize: 15\n                    }}>\n                        {this.selected}\n                    </div>\n                </div>\n                <div>\n                    <table className={\"item-table\"} style={{\n                        paddingLeft: 40\n                    }}>\n                        <tr style={{\n                            fontSize: 15,\n                            letterSpacing: 0.1,\n                            color: \"#5e6e7b\"\n                        }}>\n                            <td>Brand</td>\n                            <td>Description</td>\n                            <td>Catalog No.</td>\n                            <td>Time in pipeline</td>\n                            <td>Status</td>\n                        </tr>\n                        <tr style={{\n                            fontSize: 16,\n                            color: \"#060606\"\n                        }}>\n                            <td>Gillette</td>\n                            <td>Razor Package 135Xg</td>\n                            <td>1225434DLX</td>\n                            <td>{Math.floor(this.props.statistics.itemPipelineTimeInSeconds(this.selected) / 60 / 60 / 24)} days</td>\n                            <td style={{\n                                fontWeight: 'bold',\n                                fontSize: 16,\n                                color: '#769806'\n                            }}>OK</td>\n                        </tr>\n                    </table>\n                </div>\n            </div>}\n            {this.selected && this.ready && <div>\n                <div style={{\n                    display: 'inline-block',\n                    fontWeight: 'bold',\n                    fontSize: 21,\n                    padding: '32px 15px 32px 0',\n                    borderBottom: \"solid 0.5px #ebedf8\",\n                    width: \"100%\"\n                }}>Item history</div>\n                <div>\n                    <div className={'item-history-table'}>\n                        <table>\n                            <tr>\n                                <td></td>\n                                <td>Partner</td>\n                                <td>Stage</td>\n                                <td>Date</td>\n                                <td>Time</td>\n                                <td>Status</td>\n                                <td>Comments</td>\n                                <td>Operator</td>\n                            </tr>\n                            {\n                                _.sortBy(records.slice(this.pageSize * this.currentPage, this.pageSize * (this.currentPage + 1)), r => -r.timestampInSeconds())\n                                    .map(r => <tr>\n                                        <td className={'record-id-cell'}>Record {r.recordId()}</td>\n                                        <td style={{textAlign: 'left'}}>\n                                            <div style={{\n                                                verticalAlign: 'middle',\n                                                width: 30,\n                                                height: 30,\n                                                backgroundImage: `url(${partnerBrandImage(r.partner())})`,\n                                                backgroundSize: 'contain',\n                                                backgroundRepeat: 'no-repeat',\n                                                whiteSpace: 'nowrap',\n                                                backgroundPosition: 'center',\n                                                display: 'inline-block'\n                                            }}/>\n                                            &nbsp;&nbsp;&nbsp;{r.partner()}\n                                        </td>\n                                        <td>\n                                            <img src={stageImage(r.stage())} style={{\n                                                verticalAlign: 'middle',\n                                                width: 20,\n                                                height: 20,\n                                            }}/>&nbsp;&nbsp;&nbsp;\n                                            {stagesDisplay[r.stage()]}\n                                        </td>\n                                        <td>{`${twodigits(r.timestampAsDate().getDate())} ${r.timestampAsDate().toLocaleString('default', { month: 'short' })}, ${r.timestampAsDate().getFullYear()}`}</td>\n                                        <td>{`${twodigits(r.timestampAsDate().getHours())}:${twodigits(r.timestampAsDate().getMinutes())}`}</td>\n                                        <td className={'status-cell'}><div>OK</div></td>\n                                        <td style={{color: \"grey\", fontWeight: \"normal\", textAlign: 'center'}}>N/A</td>\n                                        <td style={{textAlign: 'center'}}>\n                                            {\n                                                r.isOperatorAvailable() ?\n                                                    <IconButton onClick={() => this.openOperatorRetreivalDialog(r)} style={{padding: 0}}>\n                                                        <AccountCircleIcon/>\n                                                    </IconButton>\n                                                    :\n                                                    <AccountCircleOutlinedIcon/>\n                                                    // <img src={process.env.REACT_APP_BASE_URL + '/operator_available.svg'} alt={'Operator details available'} onClick={() => this.openOperatorRetreivalDialog(r)}/>\n                                                    // :\n                                                    // <img src={process.env.REACT_APP_BASE_URL + '/operator_not_available.svg'} alt={'Operator details not available'}/>\n                                            }\n                                        </td>\n                                    </tr>)\n                            }\n                        </table>\n                        <TablePagination\n                            rowsPerPageOptions={[5, 10]}\n                            component=\"div\"\n                            count={records.length}\n                            rowsPerPage={this.pageSize}\n                            page={this.currentPage}\n                            onChangePage={(e, page) => this.currentPage = page}\n                            onChangeRowsPerPage={(e) => {\n                                this.pageSize = parseInt(e.target.value)\n                            }}\n                        />\n                        {this.isOperatorDialogOpen() && <Dialog onClose={() => this.closeOperatorDialog()} aria-labelledby=\"Scan Operator Details\" open={this.isOperatorDialogOpen()}>\n                            <div style={{fontSize: 20, fontWeight: 'bold', margin: 20}}>Scan Operator Details</div>\n                            <DialogContent style={{textAlign: 'left'}}>\n                                You are attempting to retrieve operator details of scan { this.scanRecordForOperatorRetreival.recordId() }. Are you sure?<br/><br/>\n                                <b>Note - this action will be logged!</b><br/><br/>\n                                <div style={{textAlign: 'center'}}>\n                                    {\n                                        this.retrievingDetails ? <CircularProgress/>\n                                        : !this.operatorDetails ? <Button variant=\"contained\" color=\"secondary\" onClick={() => this.retreiveOperatorDetails()}>RETRIEVE OEPRATOR DETAILS</Button>\n                                            : <span>Full name: <b>{this.operatorDetails}</b></span>\n                                    }\n                                </div>\n                                <DialogActions>\n                                    <Button autoFocus onClick={() => this.closeOperatorDialog()} color=\"primary\" style={{marginTop: 20}}>\n                                        {this.operatorDetails ? 'DONE' : 'CANCEL'}\n                                    </Button>\n                                </DialogActions>\n                            </DialogContent>\n                        </Dialog>}\n                    </div>\n                </div>\n            </div>}\n        </div>\n    }\n\n    @observable retrievingDetails = false;\n    @observable operatorDetails = null;\n\n    private retreiveOperatorDetails() {\n        this.retrievingDetails = true;\n        setTimeout(() => {\n            this.retrievingDetails = false;\n            this.operatorDetails = this.scanRecordForOperatorRetreival.operatorFullName();\n        }, 3000)\n    }\n\n    @observable scanRecordForOperatorRetreival: ScanRecord;\n\n    private openOperatorRetreivalDialog(r: ScanRecord) {\n        this.scanRecordForOperatorRetreival = r;\n    }\n\n    private closeOperatorDialog() {\n        this.scanRecordForOperatorRetreival = null;\n        this.operatorDetails = null;\n    }\n\n    private isOperatorDialogOpen(): boolean {\n        return this.scanRecordForOperatorRetreival != null;\n    }\n}\n","import * as _ from \"lodash\";\nimport React from \"react\";\n\nconst scale = 0.6;\n\nclass Bar extends React.Component<{\n                 label: string,\n                 value: number,\n                 color: string,\n                 image: string,\n                 percent: number\n             }, {}> {\n\n    toRunOnMount = [];\n\n    componentDidMount() {\n        const fs = this.toRunOnMount;\n        this.toRunOnMount = null;\n        fs.forEach(f => f());\n    }\n\n    runOnMount(f) {\n        if (this.toRunOnMount == null) {\n            f();\n        } else {\n            this.toRunOnMount.push(f);\n        }\n    }\n\n    render() {\n        const {label, value, color, image, percent} = this.props;\n\n        return <div style={{\n            display: 'flex',\n            flexDirection: 'column',\n            margin: \"0 3px\"\n        }}>\n            <div\n                style={{flex: 1, display: \"flex\", flexDirection: \"column\", alignContent: 'flex-end', paddingBottom: 5}}>\n                <div style={{flex: 1}}/>\n                <div style={{textAlign: 'center', fontSize: 40 * scale, paddingBottom: 3}}>{value}</div>\n                <div style={{\n                    backgroundColor: color,\n                    height: 0,\n                    transition: 'height 1s'\n                }} ref={e => this.runOnMount(() => {\n                    setTimeout(() => {\n                        if (e) e.style.height = `${Math.ceil(percent * 100)}%`\n                    }, 10);\n                })}/>\n            </div>\n            <div style={{\n                height: 124 * scale + 10,\n                width: 114 * scale,\n                backgroundColor: \"#e9e9e9\",\n                boxSizing: 'border-box',\n                display: 'flex',\n                flexDirection: 'column',\n                fontSize: 16 * scale,\n                color: \"#060606\",\n                alignItems: 'center'\n            }}>\n                <div style={{\n                    height: 70 * scale,\n                    minHeight: 70 * scale,\n                    width: 70 * scale,\n                    minWidth: 70 * scale,\n                    marginTop: 20 * scale,\n                    backgroundImage: `url(${image})`,\n                    backgroundPosition: 'center',\n                    backgroundRepeat: 'no-repeat',\n                    backgroundSize: 'contain',\n                }}/>\n                <span style={{\n                    textAlign: 'center',\n                    paddingTop: 5,\n                    paddingBottom: 20 * scale,\n                    wordBreak: 'break-word'\n                }}>{label}</span>\n            </div>\n        </div>\n    }\n}\n\nexport class BarChart extends React.Component<{\n    labels: string[],\n    values: number[],\n    colors: string[],\n    images: string[]\n}, {}> {\n\n    render() {\n        const {labels, values, colors, images} = this.props;\n        const maxValue = _.max(values);\n        return <div style={{\n            width: '100%',\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'center'\n        }}>\n            {labels.map(\n                (l, i) => <Bar\n                    label={labels[i]}\n                    value={values[i]}\n                    image={images[i]}\n                    color={colors[i % colors.length]}\n                    percent={maxValue == 0 ? 0 : values[i] / maxValue}\n                />\n            )}\n            {/*{[labels[0], labels[1], labels[2], labels[3]].map(*/}\n            {/*    (l, i) => <Bar*/}\n            {/*        label={labels[i]}*/}\n            {/*        value={values[i]}*/}\n            {/*        image={images[i]}*/}\n            {/*        color={colors[i % colors.length]}*/}\n            {/*        percent={maxValue == 0 ? 0 : values[i] / maxValue}*/}\n            {/*    />*/}\n            {/*)}*/}\n        </div>\n    }\n\n}\n","import React from \"react\";\nimport * as _ from 'lodash';\nimport {inject, observer} from \"mobx-react\";\nimport {\n    AdjacentScansAlertThresholdMs, IAdjacentScansAlert,\n    IAlert,\n    IRepeatedScanAlert,\n    ITooManyScansAlert,\n    Statistics,\n    TooManyScansAlertThreshold\n} from \"./statistics\";\nimport {BarChart} from \"./bar-chart\";\nimport {observable, toJS} from \"mobx\";\nimport {partnerBrandImage, stageImage} from \"./resources\";\nimport {TablePagination} from \"@material-ui/core\";\nimport {stages, stagesDisplay} from \"./record\";\n\n@observer\nclass Databox extends React.Component<{\n    title: string,\n    data: number\n    subText?: string\n    decimals?: number\n}, {}> {\n\n    @observable initDisplayedData: number = 0;\n    @observable finalDisplayedData: number = null;\n    @observable initial = true;\n\n    mounted = false;\n\n    format(v: number): string {\n        if (this.props.decimals) {\n            return `${Math.floor(v)}.${Math.floor(v * 10) % 10}`;\n        } else {\n            return `${v}`\n        }\n    }\n\n    componentDidMount() {\n        this.mounted = true;\n        const duration = 1000;\n        const data = this.props.data || 0;\n        const mountedAt = Date.now();\n        const update = () => {\n            if (this.mounted) {\n                const delta = Date.now() - mountedAt;\n                if (delta < duration) {\n                    this.initDisplayedData = Math.floor(data * (delta / duration));\n                    requestAnimationFrame(update);\n                } else {\n                    this.finalDisplayedData = data;\n                    this.initial = false;\n                }\n            }\n        };\n        update();\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n\n    componentDidUpdate() {\n        this.finalDisplayedData = this.props.data;\n    }\n\n    render() {\n        return <div className={'databox'}>\n            <div className={'databox-title'}>{this.props.title}</div>\n            <div className={'databox-infotext'}>\n                <span>{this.format(this.initial ? this.initDisplayedData : this.finalDisplayedData)}</span>\n                {this.props.subText &&\n                    <div className={'databox-subtext'}>\n                        <span>{this.props.subText}</span>\n                    </div>\n                }\n            </div>\n        </div>\n    }\n\n}\n\n@inject('statistics')\n@observer\nexport class OverviewPage extends React.Component<{\n    statistics: Statistics\n}, {}> {\n    @observable private rowsPerPage: number = 5;\n    @observable private page: number = 0;\n    render() {\n        const byPartner = this.props.statistics.itemCountByPartner;\n        const partners = _.reverse(Object.keys(toJS(byPartner)).sort());\n        const byStage = this.props.statistics.itemCountByStage;\n        // const stages = Object.keys(toJS(byStage)).sort();\n        const repeatedScanAlertsCount = this.props.statistics.alerts.filter(a => a.alertType == 'Repeated Scan').length;\n        const tooManyAlertsCount = this.props.statistics.alerts.filter(a => a.alertType == 'Too Many Scans').length;\n        const adjacentScansAlertsCount = this.props.statistics.alerts.filter(a => a.alertType == 'Adjacent Scans').length;\n        const alertCount = this.props.statistics.alerts.length;\n\n        return <div style={{\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'row',\n            flexWrap: 'wrap',\n            justifyContent: 'center',\n        }}>\n            <div style={{display: 'flex', flexDirection:'column', flex: 1, borderRight: '1px solid #ebedf8'}}>\n                <div style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    flexWrap: 'wrap'\n                }}>\n                    <div style={{flex: 1, borderRight: '1px solid #ebedf8', marginTop: 50}}>\n                        <div className=\"title\" style={{\n                            height: 46,\n                            borderBottom: '1px solid #ebedf8',\n                            alignItems: 'start'\n                        }}>\n                            <span>Products by stage</span>\n                        </div>\n                        <div style={{height: 300, padding: 20, marginLeft: 50, borderBottom: '1px solid #ebedf8'}}>\n                            <BarChart\n                                colors={[\"#035093\", \"#035093\", \"#4889c2\", \"#0a4171\"]}\n                                images={stages.map(stage => stageImage(stage))}\n                                labels={stages.map(stage => stagesDisplay[stage])}\n                                values={stages.map(stage => byStage[stage])}\n                            />\n                        </div>\n                    </div>\n                    <div style={{flex: 1, marginTop: 50}}>\n                        <div className=\"title\" style={{\n                            height: 46,\n                            borderBottom: '1px solid #ebedf8',\n                            alignItems: 'start'\n                        }}>\n                            <span>Products by partner</span>\n                        </div>\n                        <div style={{height: 300, padding: 20, borderBottom: '1px solid #ebedf8'}}>\n                            <BarChart\n                                colors={[\"#bb8888\", \"#a37878\", \"#d19d9d\", \"#bb8888\"]}\n                                images={partners.map(partner => partnerBrandImage(partner))}\n                                labels={partners}\n                                values={partners.map(partner => byPartner[partner])}\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div style={{marginLeft: 50}}>\n                    <div style={{\n                        height: 50,\n                        borderBottom: '1px solid #ebedf8',\n                        display: 'flex',\n                        flexDirection: 'row',\n                        alignItems: 'center'\n                    }}>\n                        <img src={process.env.REACT_APP_BASE_URL + \"/alert.svg\"} alt={\"alert\"} style={{padding: \"0 10px\"}}/> <span>Alerts</span>\n                    </div>\n                    {\n                        alertCount > 0 ?\n                        <div className={\"alerts\"}>\n                            <ul>\n                                {repeatedScanAlertsCount > 0 && <li><b>{repeatedScanAlertsCount}</b> item{repeatedScanAlertsCount > 1 ? 's were' : ' was'} rescanned in a previous location (<i>Repeated-Scan-Alert</i>)</li>}\n                                {tooManyAlertsCount > 0 && <li><b>{tooManyAlertsCount}</b> item{tooManyAlertsCount > 1 ? 's were' : ' was'} scanned more than {TooManyScansAlertThreshold} times (<i>Too-Many-Scans-Alert</i>)</li>}\n                                {adjacentScansAlertsCount > 0 && <li><b>{adjacentScansAlertsCount}</b> item{adjacentScansAlertsCount > 1 ? 's were' : ' was'} scanned in two or more different locations within a period of less than {AdjacentScansAlertThresholdMs / 1000 / 60} minutes (<i>Adjacent-Scans-Alert</i>)</li>}\n                            </ul>\n                            <table className={\"alerts-table\"}>\n                                <tr>\n                                    <td>TIMESTAMP</td>\n                                    <td>ALERT TYPE</td>\n                                    <td>ITEM ID</td>\n                                    <td>DESCRIPTION</td>\n                                </tr>\n                                {_.sortBy(this.props.statistics.alerts, alert => -alert.timestamp.getTime())\n                                    .slice(this.page * this.rowsPerPage, (this.page+1) * this.rowsPerPage)\n                                    .map((alert: IAlert) => <tr>\n                                        <td style={{whiteSpace: \"nowrap\"}}>{alert.timestamp.toDateString()}</td>\n                                        <td style={{whiteSpace: \"nowrap\"}}>{alert.alertType}</td>\n                                        <td style={{whiteSpace: \"nowrap\"}}>{alert.itemId}</td>\n                                        <td style={{width: \"100%\"}}>{\n                                            alert.alertType == 'Repeated Scan' ?\n                                                <span> Item was scanned twice at location <i>{(alert as IRepeatedScanAlert).location}</i> (previous scan was at {(alert as IRepeatedScanAlert).prevTime.toDateString()})</span>\n                                            : alert.alertType == 'Too Many Scans' ?\n                                                <span> Item was scanned <b>{(alert as ITooManyScansAlert).count}</b> times</span>\n                                            : alert.alertType == 'Adjacent Scans' ?\n                                                <span> Detected two consecutive scans in different locations in under <b>{Math.ceil((alert as IAdjacentScansAlert).deltaInMs / 1000 / 60)}</b> minutes.</span>\n                                            :\n                                                <span></span>\n                                        }</td>\n                                    </tr>)}\n                            </table>\n                            <TablePagination\n                                rowsPerPageOptions={[5, 10]}\n                                component=\"div\"\n                                count={this.props.statistics.alerts.length}\n                                rowsPerPage={this.rowsPerPage}\n                                page={this.page}\n                                onChangePage={(e, page) => this.page = page}\n                                onChangeRowsPerPage={(e) => {\n                                    this.rowsPerPage = parseInt(e.target.value)\n                                }}\n                            />\n                        </div>\n                        : <div style={{color: '#bebebe', margin: 10}}>- None -</div>\n                    }\n\n                </div>\n            </div>\n            <div style={{\n                letterSpacing: 1.13,\n                fontSize: 19,\n            }}>\n                {this.renderDataSection()}\n            </div>\n        </div>\n    }\n\n    private renderDataSection() {\n        const {statistics} = this.props;\n        return <div style={{\n            width: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center'\n        }}>\n            <div className={\"title\"} style={{\n                height: 96,\n                width: '100%',\n                borderBottom: '1px solid #ebedf8',\n            }}><span style={{marginTop: 22}}>Data</span></div>\n            <div style={{margin:\"30px 30px 0 30px\"}}>\n                <table className={'data-table'}>\n                    <tr>\n                        <td className={'border-right border-bottom'}><Databox title={\"Alerted Products\"} data={statistics.alertedItems.length}/></td>\n                        <td className={'border-left border-bottom'}><Databox title={\"Avg. Time in pipeline\"} data={statistics.avgPiplineTimePerItemInDays} subText={\"DAYS\"} decimals={1}/></td>\n                    </tr>\n                    <tr>\n                        <td className={'border-right border-top'}><Databox title={\"Suspected counterfeit\"} data={0}/></td>\n                        <td className={'border-left border-top'}><Databox title={\"Avg. scans per item\"} data={statistics.avgRecordsPerItem} decimals={1}/></td>\n                    </tr>\n                </table>\n                <div style={{\n                    borderBottom: \"1px solid #ebedf8\",\n                    height: 0\n                }}/>\n                <div style={{\n                    fontSize: 16,\n                    color: '#060606',\n                    margin: '70px 0 40px'\n                }}>\n                    Items Location\n                </div>\n                <img src={process.env.REACT_APP_BASE_URL + \"/worldmap.svg\"} style={{width: '100%'}} alt=\"Route tracking\"/>\n            </div>\n        </div>\n    }\n}\n","import {ItemStatusPage} from \"./item-status-page\";\nimport {OverviewPage} from \"./overview-page\";\n\ntype RouteName = \"itemStatus\" | \"overview\";\n\nexport interface IRoute {\n  name: RouteName;\n  displayIndex: number;\n  cssClass: string;\n  path: string,\n  menuImg: string\n  component;\n}\n\nexport const routes: IRoute[] = [\n  {\n    name: 'itemStatus',\n    path: '/item_status',\n    menuImg: '/menu-item-status.svg',\n    cssClass: 'item-status',\n    displayIndex: 1,\n    component: ItemStatusPage\n  },\n  { // must be last\n    name: 'overview',\n    path: '/',\n    menuImg: '/menu-overview.svg',\n    cssClass: 'overview',\n    displayIndex: 0,\n    component: OverviewPage\n  }\n];\n\n\nexport function getCurrentRoute(): IRoute {\n  return routes.find(r => r.path == window.location.hash.slice(1)) || routes[routes.length - 1];\n}\n\nexport function getRoute(name: RouteName): IRoute {\n  return routes.find(r => r.name == name);\n}\n","import * as _ from 'lodash';\n\nimport React from \"react\";\nimport {getCurrentRoute, IRoute, routes} from \"./routes\";\nimport {observer} from \"mobx-react\";\nimport {observable} from \"mobx\";\n\nfunction Link({onClick, className}) {\n    return <div onClick={() => onClick()} style={{width: '100%', boxSizing: 'border-box', margin: 30}} className={className}/>;\n}\n\n@observer\nexport class SideMenu extends React.Component<{},{}> {\n\n    @observable currentRoute = getCurrentRoute();\n\n    render() {\n        const className = (route: IRoute) => {\n            return `menu-item menu-item-${route.cssClass} ${this.currentRoute.name == route.name ? 'selected' : ''}`\n        };\n\n        return <div className=\"side-menu\" style={{height: '100%', width: '100%'}}>\n            <style dangerouslySetInnerHTML={{__html:`\n                .side-menu .menu-item-overview {\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-overview.svg);\n                }\n\n                .side-menu .menu-item-overview.selected{\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-overview-selected.svg);\n                    border-right: 3px solid #3e4d73;\n                }\n\n                .side-menu .menu-item-overview:hover{\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-overview-hovered.svg);\n                }\n\n                .side-menu .menu-item-item-status {\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-item-status.svg);\n                }\n\n                .side-menu .menu-item-item-status.selected{\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-item-status-selected.svg);\n                    border-right: 3px solid #3e4d73;\n                }\n\n                .side-menu .menu-item-item-status:hover{\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-item-status-hovered.svg);\n                }\n            `}}/>\n            <div className='side-menu-orbs' style={{padding: 30, marginBottom: 20}}>\n                <img style={{height: 32, width:32}} src={process.env.REACT_APP_BASE_URL + '/orbs-logo.svg'}/>\n            </div>\n            {\n                _.sortBy(routes, r => r.displayIndex).map(\n                    route => <Link\n                        onClick={() => this.navigateTo(route)}\n                        className={className(route)}\n                    />\n                )\n            }\n        </div>\n    }\n\n    navigateTo(route: IRoute) {\n        window.location.hash = route.path;\n        this.currentRoute = route;\n    }\n\n    componentDidMount(): void {\n        window.onhashchange = () => this.currentRoute = getCurrentRoute();\n    }\n\n    componentWillUnmount(): void {\n        window.onhashchange = null;\n    }\n}\n","import React from \"react\";\nimport * as _ from \"lodash\";\nimport {observer} from \"mobx-react\";\nimport {observable} from \"mobx\";\n\n@observer\nexport class LoadingPage extends React.Component<{}, {}> {\n\n    @observable loadingCaption = \"Loading...\";\n\n    render() {\n        return <div className={\"loading-page\"}>\n            <div className={\"logo-container\"}>\n                <div style={{\n                    height: '100%',\n                    width: '100%',\n                    textAlign: 'center'\n                }}><img className={\"orbs-logo\"} src={process.env.REACT_APP_BASE_URL + \"/orbs-logo.svg\"}/></div>\n                <div className={\"loading-lbl\"}>{this.loadingCaption}</div>\n            </div>\n        </div>\n    }\n\n    componentDidMount() {\n        let i = 0;\n        setInterval(() => {\n            this.loadingCaption = \"Loading\" + _.range(i).map(() => '.').join('');\n            i = (i + 1) % 4;\n        }, 500)\n    }\n}\n","import React from \"react\";\nimport {Alert, AlertTitle} from \"@material-ui/lab\";\n\n\nexport class ErrorPage extends React.Component<{err: Error}, {}> {\n\n    render() {\n        return <div style={{display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100%', textAlign: 'left'}}>\n            <Alert severity=\"error\">\n                <AlertTitle>Error</AlertTitle>\n                We were unable to load the page at the moment. Please try again. <br/>\n                <span style={{color: \"#bebebe\"}}><pre>Error: {this.props.err.toString()}</pre></span>\n            </Alert>\n        </div>\n    }\n\n}\n","import * as _ from 'lodash';\nimport React from 'react';\nimport {inject, observer} from \"mobx-react\";\nimport {RecordStore} from \"./record-store\";\nimport {BrowserRouter, Switch, Route, HashRouter} from 'react-router-dom';\nimport {routes} from \"./routes\";\nimport {SideMenu} from \"./side-menu\";\nimport {ItemStatusPage} from \"./item-status-page\";\nimport {OverviewPage} from \"./overview-page\";\nimport {LoadingPage} from \"./loading-page\";\nimport {ErrorPage} from \"./error-page\";\n\n\n@inject('records')\n@observer\nexport class App extends React.Component<{\n  records?: RecordStore\n},{}> {\n  render() {\n    return this.props.records.ready ? <HashRouter>\n      <div style={{height: '100%', width: '100%', maxWidth: 2000, display: \"inline-block\", position: 'relative', textAlign: 'left'}}>\n        <div style={{position: 'absolute', top: 0, left: 0, bottom: 0, width: 89}}>\n          <SideMenu/>\n        </div>\n        <div style={{position: 'absolute', top: 0, left: 90, bottom: 0, right:0, overflow: 'auto', borderRight: \"1px solid #ebedf8\"}}>\n            <Switch>\n              {\n                routes.map(route => {\n                  const PageComponent = route.component;\n                  return <Route path={route.path}>\n                    <PageComponent/>\n                  </Route>\n                })\n              }\n            </Switch>\n        </div>\n      </div>\n    </HashRouter>\n            : this.props.records.err ? <ErrorPage err={this.props.records.err}/>\n            : <LoadingPage/>\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"mobx-react\";\nimport {createStores} from \"./stores\";\nimport {App} from \"./App\";\n\nconst stores = createStores();\n(window as any).stores = stores;\n\nReactDOM.render(\n    <Provider {...stores}>\n        <App/>\n    </Provider>\n    ,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n","import {RecordStore} from \"./record-store\";\nimport {Statistics} from \"./statistics\";\n\nexport interface IStores {\n    records: RecordStore;\n    statistics: Statistics;\n}\n\nexport function createStores(): IStores {\n    const records = new RecordStore();\n    return {\n        records,\n        statistics: new Statistics(records)\n    }\n}\n"],"sourceRoot":""}