{"version":3,"sources":["serviceWorker.ts","names.ts","record.ts","record-store.ts","statistics.ts","gateway-config.ts","osa-alerts.ts","alerts.ts","shrinkage-alerts.ts","page-header.tsx","item-status-page.tsx","bar-chart.tsx","alerts-table.tsx","overview-page.tsx","osa-stats.ts","error-page.tsx","on-shelf-availability-page.tsx","shrinkage-page.tsx","routes.ts","settings-page.tsx","side-menu.tsx","loading-page.tsx","App.tsx","index.tsx","stores.ts"],"names":["Boolean","window","location","hostname","match","names","hashCode","s","Math","abs","split","reduce","a","b","charCodeAt","ScanRecord","raw","gatewayConfig","rawLowecase","this","Object","keys","forEach","k","toLowerCase","tagid","timestampInMilliseconds","timestamp","Date","gatewayid","eventtype","eventvalue","cfg","getFor","Alias","LocationCategory","JSON","stringify","toString","h","recordId","lastName","length","RecordStore","pollingIntervalMs","init","now","fetch","setTimeout","ready","f","err","process","REACT_APP_RECORDS_URL","res","json","records","filter","r","msg","map","find","x","_","observable","Statistics","recordsStore","item","itemRecords","timestampInSeconds","itemId","_itemRecords","gatewayId","_itemCountByGateway","groupBy","values","pRecs","mean","value","avgPiplineTimePerItemInSeconds","mapValues","recs","n","max","uniq","rec","push","latestRecordsPerItem","alerts","computed","LocationCategories","findLocationCategory","cat","replace","loadGatewayConfigRecords","url","stripKey","strip","trim","Promise","resolve","reject","Papa","download","header","error","complete","results","data","newK","ID","id","alias","locationcategory","SiteCategory","sitecategory","BackroomGatewayId","backroomgatewayid","GatewayConfig","configById","REACT_APP_GATEWAY_CONFIG_URL","prevalidateConfig","postvalidateConfig","Error","key","all","c","OSAAlerts","statistics","customerRetailShelves","shelf","backroom","onShelf","itemCountByGateway","category","alertType","customerBackrooms","inventoryNotOnShelfAlerts","concat","backroomInventoryLowAlerts","AlertTypes","alertsByTime","nBins","minBinSize","bins","binSize","startTime","times","getTime","floor","alertsInLast","duration","ShrinkageAlerts","FrontDoors","frontDoor","pos","itemUIDs","itemID","posRec","frontDoorRec","shelfRec","timestampAsDate","y","shelfRecs","gatewayLocationCategory","lastShelfRec","itemWentDarkAlerts","alert","LARGE_QTY_WENT_DARK_THRESHOLD","quantity","itemSkippedPOSAlerts","largeQuantityWentDarkAlerts","PageHeader","title","style","height","borderBottom","fontWeight","display","alignItems","paddingLeft","twodigits","ItemStatusPage","inject","observer","currentTimeoutHandle","loadData","reaction","selected","clearTimeout","props","margin","fontSize","padding","Autocomplete","options","getOptionLabel","option","width","filterOptions","createFilterOptions","matchFrom","onChange","e","selectedItemUID","renderInput","params","TextField","label","variant","CircularProgress","marginLeft","borderRadius","border","backgroundColor","flexDirection","marginRight","overflow","color","letterSpacing","paddingBottom","className","itemPipelineTimeInSeconds","slice","pageSize","currentPage","textAlign","verticalAlign","backgroundImage","gatewayImage","backgroundSize","backgroundRepeat","whiteSpace","backgroundPosition","gatewayAlias","eventType","eventValue","getDate","toLocaleString","month","getFullYear","getHours","getMinutes","TablePagination","rowsPerPageOptions","component","count","rowsPerPage","page","onChangePage","onChangeRowsPerPage","parseInt","target","isOperatorDialogOpen","Dialog","onClose","closeOperatorDialog","aria-labelledby","open","DialogContent","scanRecordForOperatorRetreival","retrievingDetails","operatorDetails","Button","onClick","retreiveOperatorDetails","DialogActions","autoFocus","marginTop","operatorFullName","indexOf","React","Component","Bar","toRunOnMount","fs","image","percent","flex","alignContent","transition","ref","runOnMount","ceil","boxSizing","minHeight","minWidth","paddingTop","wordBreak","BarChart","labels","colors","images","maxValue","justifyContent","l","i","AlertsTable","filteredAlerts","alertTypeFilter","paddingRight","Select","MenuItem","maxWidth","toDateString","colSpan","Databox","mounted","v","decimals","mountedAt","update","delta","initDisplayedData","requestAnimationFrame","finalDisplayedData","initial","format","subText","OverviewPage","gateways","borderRight","flexWrap","gateway","gw","renderAlertsSection","renderDataSection","osaAlerts","shrinkageAlerts","largeQtyWentDarkAlerts","src","alt","alertedItemsCount","avgPiplineTimePerItemInDays","suspectedCounterfietCount","avgRecordsPerItem","allAlerts","OSAStats","turnoverTimes","t","itemLoc","history","prev","current","time","lastItemScan","itemCountHistory","backroomId","ErrorPage","Alert","severity","AlertTitle","prettyFloat","formatTurnoverTime","tMs","OnShelfAvailabilityPage","first","selectedGatewayId","osaStats","turnoverTimeHistogram","gwId","metricBox","itemCountAtGateway","itemCountAtBackroom","datasets","fill","lineTension","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","gatewayItemCountHistory","backroomItemCountHistory","scales","xAxes","type","distribution","offset","yAxes","ticks","beginAtZero","maintainAspectRatio","legend","avgTurnoverTime","borderWidth","hoverBackgroundColor","hoverBorderColor","iconUrl","ShrinkagePage","itemWentDarkAlertsByTime","itemSkippedPOSAlertsByTime","alertedItemsCountLast24Hours","alertedItemsCountLast30Days","subTitle","routes","name","path","menuImg","cssClass","displayIndex","dangerouslySetInnerHTML","__html","fontFamily","deleteAllRecordsClicked","confirm","getCurrentRoute","hash","Link","SideMenu","route","currentRoute","marginBottom","navigateTo","onhashchange","LoadingPage","loadingCaption","setInterval","join","App","position","top","left","bottom","right","PageComponent","stores","createStores","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.da7e63bd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const names = [\"Clere\", \"Edbert\", \"Kareem\", \"Topper\", \"Busey\", \"Woody\", \"Ikkela\", \"Jenesia\", \"Deirdre\", \"Bloom\", \"Ellwood\", \"Burget\", \"Carnay\", \"Karlotte\", \"Vins\", \"Obau\", \"Adoree\", \"Jensen\", \"Lemuela\", \"Nahum\", \"Eskill\", \"Deeanne\", \"Hayes\", \"Meridel\", \"Flemming\", \"Eldwin\", \"Om\", \"Weisbrodt\", \"Scheer\", \"Carlen\", \"Armalda\", \"Schindler\", \"Rahman\", \"Tolley\", \"Sherwin\", \"Avelin\", \"Xever\", \"Lanny\", \"Jedidiah\", \"Dorie\", \"Madalena\", \"Langston\", \"Halle\", \"Ileana\", \"Hunley\", \"Juieta\", \"Ngo\", \"Lubet\", \"Marlene\", \"Ruthanne\", \"Stover\", \"Decca\", \"Marrin\", \"Taite\", \"Mae\", \"Wester\", \"Bricker\", \"Prissy\", \"Eadith\", \"Zacharie\", \"Malarkey\", \"Prakash\", \"Eichman\", \"Helbonnas\", \"Truc\", \"Horatia\", \"McConnell\", \"Stanhope\", \"Lathan\", \"Hax\", \"Erick\", \"Denney\", \"Faludi\", \"Cherry\", \"Keefer\", \"Jarib\", \"Ahrens\", \"Olwen\", \"Farris\", \"Bibbie\", \"Mont\", \"Sunil\", \"McNalley\", \"Girovard\", \"Schreibe\", \"Kilgore\", \"Stevana\", \"Gabler\", \"Phillida\", \"Putnam\", \"Biagi\", \"Neau\", \"Katherin\", \"Sedgewake\", \"Eisler\", \"Cyrille\", \"Uri\", \"Tammany\", \"Hagar\", \"Amby\"]\n","import {names} from \"./names\";\nimport {GatewayConfig, LocationCategory} from \"./gateway-config\";\n\nexport type Stage = 'Factory' | 'Mixing' | 'Distribution' | 'Retail';\nexport const stages: Stage[] = ['Factory', 'Mixing', 'Distribution', 'Retail'];\nexport const stagesDisplay: {[stage in Stage]: string} = {\n    Factory: 'Factory',\n    Mixing: 'Mixing Center',\n    Distribution: 'Distribution Center',\n    Retail: 'Retail'\n};\n\nexport interface IRawScanRecord {\n    tagId: string,\n    latitude: string,\n    longitude: string,\n    eventType: \"PRESENCE\",\n    gatewayId: string,\n    timestamp: number,\n    eventValue: string\n}\n\nexport interface IRawScanRecordLowecaseKeys {\n    tagid: string,\n    latitude: string,\n    longitude: string,\n    eventtype: \"PRESENCE\",\n    gatewayid: string,\n    timestamp: number,\n    eventvalue: string\n}\n\nconst hashCode = s => Math.abs(s.split('').reduce((a,b)=>{a=((a<<5)-a)+b.charCodeAt(0);return a&a},0));\n\nexport class ScanRecord {\n    private rawLowecase: IRawScanRecordLowecaseKeys;\n    constructor(public raw: IRawScanRecord, private gatewayConfig: GatewayConfig) {\n        this.rawLowecase = {} as IRawScanRecordLowecaseKeys;\n        Object.keys(raw).forEach(k => this.rawLowecase[k.toLowerCase()] = raw[k]);\n    }\n\n    itemId(): string {\n        return this.rawLowecase.tagid;\n    }\n\n    timestampInSeconds(): number {\n        return this.timestampInMilliseconds() / 1000;\n    }\n\n    timestampInMilliseconds(): number {\n        return this.rawLowecase.timestamp * 1000;\n    }\n\n    timestampAsDate(): Date {\n        return new Date(this.timestampInMilliseconds());\n    }\n\n    gatewayId(): string {\n        return this.rawLowecase.gatewayid;\n    }\n\n    eventType(): string {\n        return this.rawLowecase.eventtype;\n    }\n\n    eventValue(): string {\n        return this.rawLowecase.eventvalue;\n    }\n\n    gatewayAlias(): string {\n        const cfg = this.gatewayConfig.getFor(this.rawLowecase.gatewayid);\n        return cfg ? cfg.Alias : this.rawLowecase.gatewayid;\n    }\n\n    gatewayLocationCategory(): LocationCategory {\n        const cfg = this.gatewayConfig.getFor(this.rawLowecase.gatewayid);\n        return cfg ? cfg.LocationCategory : null;\n    }\n\n    recordId(): string {\n        // TODO - get from server\n        return hashCode(JSON.stringify(this.raw)).toString();\n    }\n\n    isOperatorAvailable(): boolean {\n        // return this.partner().toLowerCase() == 'p&g';\n        return false\n    }\n\n    operatorFullName(): string {\n        const h = hashCode(this.recordId());\n        const firstName = names[h % names.length];\n        const lastName = names[(h+1) % names.length];\n        return `${firstName} ${lastName}`;\n    }\n}\n","import {observable} from \"mobx\";\nimport {IRawScanRecord, ScanRecord} from \"./record\";\nimport {GatewayConfig} from \"./gateway-config\";\nimport * as _ from \"lodash\";\n\nexport class RecordStore {\n\n    @observable ready = false;\n    @observable err: Error = null;\n\n    @observable records: ScanRecord[] = [];\n\n    constructor(private gatewayConfig: GatewayConfig, pollingIntervalMs = 1000) {\n        this.init(pollingIntervalMs)\n    }\n\n    private async init(pollingIntervalMs: number) {\n        try {\n            const now = Date.now();\n            await this.fetch();\n            // const delay = Math.max(0, 800 - (Date.now() - now));\n            const delay = 1;\n            setTimeout(() => this.ready = true, delay);\n\n            const f = async () => {\n                try {\n                    await this.fetch();\n                    setTimeout(f, pollingIntervalMs)\n                } catch (e) {\n                    this.err = e;\n                }\n            };\n            f();\n        } catch (e) {\n            this.err = e;\n        }\n    }\n\n    public async fetch() {\n        const res = await fetch(process.env.REACT_APP_RECORDS_URL || \"https://png-collector.herokuapp.com/getAllEvents\");\n        const records: IRawScanRecord[] = await res.json();\n\n        if (this.records == null || records.length != this.records.length) {\n            this.records = records\n                .filter(r => (r as any).msg != \"[object Object]\")\n                .filter(r => Object.keys(r).map(k => k.toLowerCase()).find(x => x == \"tagid\"))\n                .map(raw => new ScanRecord(raw, this.gatewayConfig));\n            this.records = _.sortBy(this.records, r => r.timestampInMilliseconds());\n        }\n    }\n}\n","import {RecordStore} from \"./record-store\";\nimport * as _ from \"lodash\";\nimport {computed} from \"mobx\";\nimport {ScanRecord} from \"./record\";\nimport {IAlert} from \"./alerts\";\n\nexport interface IRepeatedScanAlert extends IAlert {\n    location: string,\n    prevTime: Date\n}\n\nexport interface ITooManyScansAlert extends IAlert {\n    count: number\n}\nexport const TooManyScansAlertThreshold = 10;\n\nexport interface IAdjacentScansAlert extends IAlert {\n    deltaInMs: number\n}\nexport const AdjacentScansAlertThresholdMs = 15 * 60 * 1000;\n\nexport class Statistics {\n\n    constructor(public recordsStore: RecordStore) {}\n\n    @computed get avgRecordsPerItem(): number {\n        return _.chain(this.recordsStore.records)\n            .groupBy(r => r.itemId())\n            .values()\n            .map((pRecs: ScanRecord[]) => pRecs.length)\n            .mean()\n            .value() || 0\n    }\n\n    @computed get avgPiplineTimePerItemInDays(): number {\n        return this.avgPiplineTimePerItemInSeconds / 60 / 60 / 24;\n    }\n\n    @computed get avgPiplineTimePerItemInSeconds(): number {\n        const now = Date.now() / 1000;\n        return _.chain(this.recordsStore.records)\n            .groupBy(r => r.itemId())\n            .mapValues((recs: ScanRecord[]) => now - _.min(recs.map(r => r.timestampInSeconds())))\n            .map(n => Math.max(n, 0))\n            .mean()\n            .value() || 0;\n    }\n\n    itemPipelineTimeInSeconds(item: string): number {\n        const now = Date.now() / 1000;\n        return now - _.min(this.itemRecords(item).map(r => r.timestampInSeconds()));\n    }\n\n    @computed get itemUIDs(): string[] {\n        return _.chain(this.recordsStore.records)\n            .map(r => r.itemId())\n            .uniq()\n            .value();\n    }\n\n    @computed get latestRecordsPerItem(): ScanRecord[] {\n        return _.chain(this.recordsStore.records)\n            .groupBy(r => r.itemId())\n            .mapValues((recs: ScanRecord[]) => _.maxBy(recs, (r: ScanRecord) => r.timestampInSeconds()))\n            .values()\n            .value()\n    }\n\n    @computed get _itemRecords(): {[itemId: string]: ScanRecord[]} {\n        const itemRecords: {[itemId: string]: ScanRecord[]} = {};\n        for (const rec of this.recordsStore.records) {\n            itemRecords[rec.itemId()] = itemRecords[rec.itemId()] || [];\n            itemRecords[rec.itemId()].push(rec);\n        }\n        return itemRecords;\n    }\n\n    public itemRecords(itemId: string): ScanRecord[] {\n        return this._itemRecords[itemId] || [];\n    }\n\n    public itemRecordsSortedByTime(itemId: string): ScanRecord[] {\n        return _.sortBy(this.itemRecords(itemId), r => r.timestampInMilliseconds());\n    }\n\n    @computed get _itemCountByGateway(): {[gatewayId: string]: number} {\n        return _.chain(this.latestRecordsPerItem)\n            .groupBy(r => r.gatewayId().toLowerCase())\n            .mapValues(recs => recs.length)\n            .value();\n    }\n\n    itemCountByGateway(gatewayId: string): number {\n        return this._itemCountByGateway[gatewayId.toLowerCase()] || 0;\n    }\n\n    @computed get alerts(): IAlert[] {\n        return [];\n    }\n\n    @computed get alertedItems(): string[] {\n        return _.uniq(this.alerts.map(a => a.itemId));\n    }\n\n}\n","import * as Papa from \"papaparse\";\nimport * as _ from \"lodash\";\nimport {computed, observable} from \"mobx\";\n\nexport type LocationCategory = \"Truck\" | \"Customer DC Shelf\" | \"Customer Backroom\" | \"Customer Retail Shelf\" | \"POS\" | \"Front Door\" | string;\nexport const LocationCategories: LocationCategory[]  = [\"Truck\", \"Customer DC Shelf\", \"Customer Backroom\", \"Customer Retail Shelf\", \"POS\", \"Front Door\"];\n\nexport interface IGatewayConfigRecord {\n    ID: string;\n    Alias?: string;\n    LocationCategory?: LocationCategory;\n    SiteCategory?: string;\n    BackroomGatewayId?: string;\n}\n\nfunction findLocationCategory(cat: string): LocationCategory {\n    if (!cat) {\n        return cat;\n    }\n    return LocationCategories.find(x => x.replace(/\\s/g, \"\").toLowerCase() == cat.replace(/\\s/g, \"\").toLowerCase()) || cat;\n}\n\nexport async function loadGatewayConfigRecords(url: string): Promise<IGatewayConfigRecord[]> {\n    const stripKey = (x): string => x.replace(/\\s/g, \"\").toLowerCase();\n    const strip = (x) : string => x == null ? null : x.trim() != \"\" ? x.trim() : null;\n\n    return new Promise<IGatewayConfigRecord[]>((resolve, reject) => {\n        Papa.parse(url, {\n            download: true,\n            header: true,\n            error: (err) => reject(err),\n            complete: (results) => {\n                resolve(results.data\n                    .filter(r => Object.keys(r).filter(x => strip(r[x]) != null).length > 0)\n                    .map(r => {\n                        Object.keys(r).forEach(k => {\n                            const newK = stripKey(k);\n                            if (newK == \"\") {\n                                delete r[k];\n                            } else {\n                                r[newK] = r[k];\n                            }\n                        });\n                        return r\n                    })\n                    .map(r => ({\n                        ID: strip(r.id),\n                        Alias: strip(r.alias),\n                        LocationCategory: findLocationCategory(strip(r.locationcategory)),\n                        SiteCategory: strip(r.sitecategory),\n                        BackroomGatewayId: strip(r.backroomgatewayid)\n                    }))\n                );\n            }\n        })\n    });\n}\n\nfunction defaultConfig(gatewayId: string): IGatewayConfigRecord {\n    return {ID: gatewayId}\n}\n\nexport class GatewayConfig {\n\n    @observable ready: boolean;\n    @observable err: Error;\n\n    private records: IGatewayConfigRecord[];\n    private configById: {[id: string]: IGatewayConfigRecord} = {};\n\n    constructor() {\n        this.init();\n    }\n\n    private async init() {\n        try {\n            this.records = await loadGatewayConfigRecords(process.env.REACT_APP_GATEWAY_CONFIG_URL || \"https://trackntrace-config.s3.amazonaws.com/gw-conf.csv?AWSAccessKeyId=AKIA2SZDVCH33R4YMMVC&Signature=4uE4VaePWxQg3nOR%2Ff%2B5NJzhAUs%3D&Expires=1901521907\");\n            this.prevalidateConfig();\n            for (const rec of this.records) {\n                this.configById[rec.ID.toLowerCase()] = rec;\n            }\n            this.postvalidateConfig();\n            this.ready = true;\n        } catch (e) {\n            this.err = e;\n        }\n    }\n\n    private prevalidateConfig() {\n        for (const rec of this.records) {\n            if (rec.ID == null) { throw new Error(`Invalid gateway config: missing gateway ID`); }\n            // if (rec.LocationCategory && LocationCategories.indexOf(rec.LocationCategory) == -1) { throw new Error(`Invalid gateway location category for ${rec.ID}: provided is ${rec.LocationCategory}, allowed values are ${LocationCategories.join(',')}`); }\n        }\n    }\n\n    private postvalidateConfig() {\n        for (const rec of this.records) {\n            if (this.configById[rec.ID.toLowerCase()] != rec) { throw new Error(`Multiple gateways with same ID: ${rec.ID}`); }\n            if (rec.BackroomGatewayId && this.getFor(rec.BackroomGatewayId) == null) { throw new Error(`Invalid backroomGatewayId for gateway ${rec.ID}`); }\n        }\n    }\n\n    getFor(gatewayId: string): IGatewayConfigRecord {\n        return _.cloneDeep(this.configById[gatewayId.toLowerCase()]);\n    }\n\n    all(): IGatewayConfigRecord[] {\n        return _.cloneDeep(this.records);\n    }\n\n    gatewayImage(gatewayId: string): string {\n        const cfg = this.getFor(gatewayId);\n        const key: string = ((cfg && cfg.LocationCategory) || gatewayId).toLowerCase();\n\n        return process.env.REACT_APP_BASE_URL + ({\n            [\"3c71bf63e190\".toLowerCase()]: '/mixingcenter.svg',\n            [\"GW98f4ab141D14\".toLowerCase()]: '/factory.svg',\n            [\"GW984fab141D70\".toLowerCase()]: '/truck.svg', //\"P&G Truck\",\n            [\"GW98f4ab141D70\".toLowerCase()]: '/truck.svg', //\"P&G Truck\",\n            [\"GW98f4ab141D38\".toLowerCase()]: '/distributioncenter.svg',\n            [\"GW98f4ab141DF4\".toLowerCase()]: '/inventory.svg', //\"Customer DC or P&G DC Shelf\",\n            [\"GW98f4ab141D0C\".toLowerCase()]: '/retailstorage.svg',\n            [\"Truck\".toLowerCase()]: '/truck.svg',\n            [\"Customer DC Shelf\".toLowerCase()]: '/inventory.svg',\n            [\"Customer Backroom\".toLowerCase()]: '/retailstorage.svg',\n            [\"Customer Retail Shelf\".toLowerCase()]: \"/inventory.svg\",\n            [\"POS\".toLowerCase()]: \"/distributioncenter.svg\",\n            [\"Front Door\".toLowerCase()]: \"/mixingcenter.svg\",\n            [\"Original\".toLowerCase()]:  '/mixingcenter.svg',\n            [\"P&G Manufacturing\".toLowerCase()]:  '/factory.svg',\n            [\"P&G Truck\".toLowerCase()]:  '/truck.svg', //\"P&G Truck\",\n            [\"Customer DC or P&G DC\".toLowerCase()]:  '/distributioncenter.svg',\n            [\"Customer DC or P&G DC Shelf\".toLowerCase()]:  '/inventory.svg', //\"Customer DC or P&G DC Shelf\",\n            [\"P&G Customer Store\".toLowerCase()]:  '/retailstorage.svg',\n        }[key] || '/mixingcenter.svg');\n    }\n\n    @computed get customerBackrooms(): IGatewayConfigRecord[] {\n        return this.all().filter(c => c.LocationCategory == \"Customer Backroom\");\n    }\n\n    @computed get customerRetailShelves(): IGatewayConfigRecord[] {\n        return this.all().filter(c => c.LocationCategory == \"Customer Retail Shelf\");\n    }\n\n    @computed get POSes(): IGatewayConfigRecord[] {\n        return this.all().filter(c => c.LocationCategory == \"POS\");\n    }\n\n    @computed get FrontDoors(): IGatewayConfigRecord[] {\n        return this.all().filter(c => c.LocationCategory == \"Front Door\");\n    }\n}\n","import {Statistics} from \"./statistics\";\nimport {computed} from \"mobx\";\nimport {AlertType, IAlert} from \"./alerts\";\nimport {GatewayConfig} from \"./gateway-config\";\n\nexport class OSAAlerts {\n\n    constructor(private statistics: Statistics, private gatewayConfig: GatewayConfig) {}\n\n    @computed get inventoryNotOnShelfAlerts(): IAlert[] {\n        return this.gatewayConfig.customerRetailShelves.map(shelf => {\n            if (!shelf.BackroomGatewayId) return;\n\n            const backroom = this.gatewayConfig.getFor(shelf.BackroomGatewayId);\n            const onShelf = this.statistics.itemCountByGateway(shelf.ID);\n            if (backroom && onShelf < 3) {\n                const inBackroom = this.statistics.itemCountByGateway(backroom.ID);\n                if (inBackroom >= 1) {\n                    return {\n                        timestamp: new Date(),\n                        category: 'OSA',\n                        alertType: \"Inventory Not On Shelf\",\n                        gatewayId: shelf.ID\n                    } as IAlert;\n                }\n            }\n            return null;\n        }).filter(x => x != null);\n    }\n\n    @computed get backroomInventoryLowAlerts(): IAlert[] {\n        return this.gatewayConfig.customerBackrooms.map(backroom => {\n            const inBackroom = this.statistics.itemCountByGateway(backroom.ID);\n            if (inBackroom == 0) {\n                return {\n                    timestamp: new Date(),\n                    category: \"OSA\",\n                    alertType: \"Backroom Inventory Low\",\n                    gatewayId: backroom.ID,\n                } as IAlert;\n            }\n            return null;\n        }).filter(x => x);\n    }\n\n    @computed get alerts(): IAlert[] {\n        return this.inventoryNotOnShelfAlerts.concat(this.backroomInventoryLowAlerts);\n    }\n\n}\n","import * as _ from \"lodash\";\n\nexport type AlertType = 'Inventory Not On Shelf' | 'Backroom Inventory Low' | 'Item Skipped POS' | 'Item Went Dark' | 'Large Quantity Went Dark';\nexport const AlertTypes: AlertType[] = ['Inventory Not On Shelf', 'Backroom Inventory Low', 'Item Skipped POS', 'Item Went Dark', 'Large Quantity Went Dark'];\n\nexport type AlertCategory = 'OSA' | 'Shrinkage' | 'General';\n\nexport interface IAlert {\n    timestamp: Date,\n    category: AlertCategory,\n    alertType: AlertType,\n    itemId?: string,\n    gatewayId?: string\n}\n\nexport function alertsByTime(alerts: IAlert[], nBins: number, minBinSize: number): {bins: number[], binSize: number, startTime: number} {\n    if (alerts.length == 0) return {bins: [], binSize: 0, startTime: 0};\n\n    const times = alerts.map(a => a.timestamp.getTime());\n    const startTime = _.min(times);\n    let binSize = (_.max(times) + 1 - startTime) / nBins;\n    if (minBinSize > binSize) {\n        binSize = minBinSize;\n        nBins = Math.floor((_.max(times) + 1 - startTime) / binSize) + 1\n    }\n    const bins = _.range(nBins).map(() => 0);\n\n    for (const a of alerts) {\n        bins[Math.floor((a.timestamp.getTime() - startTime) / binSize)]++;\n    }\n\n    return {bins, binSize, startTime};\n}\n\nexport function alertsInLast(alerts: IAlert[], duration: number): IAlert[] {\n    return alerts.filter(a => a.timestamp.getTime() > Date.now() - duration);\n}\n","import * as _ from \"lodash\";\n\nimport {GatewayConfig} from \"./gateway-config\";\nimport {Statistics} from \"./statistics\";\nimport {computed} from \"mobx\";\nimport {ScanRecord} from \"./record\";\nimport {AlertCategory, alertsByTime, alertsInLast, AlertType, IAlert} from \"./alerts\";\n\nexport const GOING_DARK_TIMEOUT = 2*60*60*1000;\nexport const LARGE_QTY_WENT_DARK_THRESHOLD = 3;\n\nexport interface ILargeQuantityWentDarkAlert extends IAlert {\n    category: \"Shrinkage\",\n    alertType: \"Large Quantity Went Dark\",\n    quantity: number\n}\n\nexport class ShrinkageAlerts {\n\n    constructor(private statistics: Statistics, private gatewayConfig: GatewayConfig) {}\n\n    @computed get itemSkippedPOSAlerts(): IAlert[] {\n        return this.gatewayConfig.FrontDoors.map(frontDoor => {\n            if (!frontDoor.BackroomGatewayId) return null;\n\n            const pos = this.gatewayConfig.getFor(frontDoor.BackroomGatewayId);\n            if (!pos) return null;\n            if (pos.LocationCategory != \"POS\") return null;\n            if (!pos.BackroomGatewayId) return null;\n\n            const shelf = this.gatewayConfig.getFor(pos.BackroomGatewayId);\n            if (!shelf) return null;\n            if (shelf.LocationCategory != \"Customer Retail Shelf\") return null;\n\n            return this.statistics.itemUIDs.map(itemID => {\n                const recs = this.statistics.itemRecords(itemID);\n                const posRec = recs.find(r => r.gatewayId().toLowerCase() == pos.ID.toLowerCase());\n                const frontDoorRec = recs.find(r => r.gatewayId().toLowerCase() == frontDoor.ID.toLowerCase());\n                const shelfRec = recs.find(r => r.gatewayId().toLowerCase() == shelf.ID.toLowerCase());\n\n                if (frontDoorRec && shelfRec && !posRec) {\n                    return {\n                        timestamp: frontDoorRec.timestampAsDate(),\n                        category: \"Shrinkage\",\n                        alertType: \"Item Skipped POS\",\n                        itemId: itemID,\n                        gatewayId: frontDoor.ID\n                    } as IAlert\n                }\n\n                return null;\n            });\n        }).reduce((x, y) => x.concat(y), []).filter(x => x);\n    }\n\n    @computed get itemWentDarkAlerts(): IAlert[] {\n        return this.gatewayConfig.customerRetailShelves.map(shelf => {\n            return this.statistics.itemUIDs.map(itemID => {\n                const recs = this.statistics.itemRecords(itemID);\n                const shelfRecs = recs.filter(r => r.gatewayId().toLowerCase() == shelf.ID.toLowerCase());\n                if (shelfRecs.length > 0) {\n                    const posRec = recs.find(r => r.gatewayLocationCategory() == \"POS\");\n                    if (!posRec) {\n                        const lastShelfRec = shelfRecs[shelfRecs.length - 1];\n                        if (Date.now() - lastShelfRec.timestampInMilliseconds() > GOING_DARK_TIMEOUT) {\n                            return {\n                                timestamp: new Date(lastShelfRec.timestampInMilliseconds() + GOING_DARK_TIMEOUT),\n                                category: \"Shrinkage\",\n                                alertType: \"Item Went Dark\",\n                                itemId: itemID,\n                                gatewayId: shelf.ID,\n                            } as IAlert\n                        }\n                    }\n                }\n                return null;\n            });\n        }).reduce((x, y) => x.concat(y), []).filter(x => x);\n    }\n\n    @computed get largeQuantityWentDarkAlerts(): ILargeQuantityWentDarkAlert[] {\n        if (this.itemWentDarkAlerts.length > LARGE_QTY_WENT_DARK_THRESHOLD) {\n            const sortedByTime = _.sortBy(this.itemWentDarkAlerts, alert => alert.timestamp.getTime());\n            return [\n                {\n                    timestamp: sortedByTime[LARGE_QTY_WENT_DARK_THRESHOLD - 1].timestamp,\n                    category: \"Shrinkage\",\n                    alertType: \"Large Quantity Went Dark\",\n                    quantity: this.itemWentDarkAlerts.length\n                }\n            ]\n        }\n        return [];\n    }\n\n    @computed get alertedItemsCountLast24Hours(): number {\n        const DURATION = 24*60*60*1000;\n        return _.uniq(\n            alertsInLast(this.itemSkippedPOSAlerts, DURATION)\n            .concat(alertsInLast(this.itemWentDarkAlerts, DURATION))\n            .map(alert => alert.itemId)\n        ).length;\n    }\n\n    @computed get alertedItemsCountLast30Days(): number {\n        const DURATION = 30*24*60*60*1000;\n        return _.uniq(\n            alertsInLast(this.itemSkippedPOSAlerts, DURATION)\n            .concat(alertsInLast(this.itemWentDarkAlerts, DURATION))\n            .map(alert => alert.itemId)\n        ).length;\n    }\n\n    @computed get alerts(): IAlert[] {\n        return this.itemSkippedPOSAlerts.concat(this.itemWentDarkAlerts).concat(this.largeQuantityWentDarkAlerts);\n    }\n\n}\n","import React from \"react\";\n\nexport const PageHeader = ({title}) => <div style={{\n    height: 96,\n    borderBottom: '1px solid #ebedf8',\n    fontWeight: \"bold\",\n    display: 'flex',\n    alignItems: 'center',\n    paddingLeft: 20\n}}>\n    <div>{title}</div>\n</div>\n","import React from \"react\";\nimport * as _ from \"lodash\";\nimport {inject, observer} from \"mobx-react\";\nimport {Statistics} from \"./statistics\";\nimport {observable, reaction} from \"mobx\";\nimport {Button, CircularProgress, DialogTitle, TablePagination, TextField} from \"@material-ui/core\";\nimport {Autocomplete, createFilterOptions} from \"@material-ui/lab\";\nimport {gatewayImage, partnerBrandImage, stageImage} from \"./resources\";\nimport {ScanRecord, stagesDisplay} from \"./record\";\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport {PageHeader} from \"./page-header\";\nimport {GatewayConfig} from \"./gateway-config\";\n\nconst twodigits = (n:number) => (n < 10 ? '0' : '') + n.toString();\n\n@inject(\"statistics\", \"gatewayConfig\")\n@observer\nexport class ItemStatusPage extends React.Component<{statistics: Statistics, gatewayConfig: GatewayConfig}, {}> {\n\n    @observable private selectedItemUID: string;\n    @observable private ready = false;\n    @observable private pageSize: number = 5;\n    @observable private currentPage: number = 0;\n    private currentTimeoutHandle;\n\n    get selected(): string {\n        return this.selectedItemUID != null ?\n            (\n                this.props.statistics.itemUIDs.indexOf(this.selectedItemUID) != -1 ?\n                    this.selectedItemUID\n                    :\n                    null\n            )\n            : this.props.statistics.itemUIDs[0];\n    }\n\n    componentDidMount() {\n        this.loadData();\n        reaction(\n            () => this.selected,\n            () => this.loadData()\n        )\n    }\n\n    loadData() {\n        const uid = this.selected;\n        if (uid) {\n            this.ready = false;\n            if (this.currentTimeoutHandle) {\n                clearTimeout(this.currentTimeoutHandle);\n            }\n            this.currentTimeoutHandle = setTimeout(() => {\n                this.ready = true;\n                this.currentTimeoutHandle = null;\n            }, 1000);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.currentTimeoutHandle) {\n            clearTimeout(this.currentTimeoutHandle);\n        }\n    }\n\n    render() {\n        const records = this.props.statistics.itemRecords(this.selected);\n        return <div>\n            <PageHeader title={\"Item Scan History\"}/>\n            <div style={{margin: \"0 0 0 30px\"}}>\n            <div style={{\n                display: 'flex',\n                alignItems: 'center'\n            }}>\n                <div style={{\n                    display: 'inline-block',\n                    fontWeight: 'bold',\n                    fontSize: 21,\n                    padding: '32px 15px 32px 0'\n                }}>Search an item:</div>\n                {this.props.statistics.itemUIDs.length > 0 && <Autocomplete\n                    options={this.props.statistics.itemUIDs}\n                    getOptionLabel={option => option}\n                    style={{ width: 300}}\n                    filterOptions={createFilterOptions({\n                        matchFrom: 'start'\n                    })}\n                    onChange={(e, value) => {\n                        this.selectedItemUID = value;\n                        this.loadData();\n                    }}\n                    value={this.selectedItemUID == null ? this.selected : this.selectedItemUID}\n                    renderInput={params => <TextField {...params} label=\"Item UID\" variant=\"outlined\" />}\n                />}\n                {!this.ready && <CircularProgress style={{marginLeft: 20}}/>}\n            </div>\n            {this.selected != null && this.ready && <div style={{\n                borderRadius: 4,\n                border: \"solid 1px #ebedf8\",\n                backgroundColor: \"#f8f8f8\",\n                padding: 37,\n                display: 'flex',\n                flexDirection: 'row',\n                marginRight: 30,\n                overflow: \"auto\"\n            }}>\n                <div>\n                    <div style={{\n                        fontSize: 19,\n                        color: \"#1a173b\",\n                        letterSpacing: 0.13,\n                        paddingBottom: 12\n                    }}>\n                        Item UID\n                    </div>\n                    <div style={{\n                        color: \"#484848\",\n                        fontSize: 15\n                    }}>\n                        {this.selected}\n                    </div>\n                </div>\n                <div>\n                    <table className={\"item-table\"} style={{\n                        paddingLeft: 40\n                    }}>\n                        <tr style={{\n                            fontSize: 15,\n                            letterSpacing: 0.1,\n                            color: \"#5e6e7b\"\n                        }}>\n                            <td>Brand</td>\n                            <td>Description</td>\n                            <td>Catalog No.</td>\n                            <td>Time in pipeline</td>\n                            <td>Status</td>\n                        </tr>\n                        <tr style={{\n                            fontSize: 16,\n                            color: \"#060606\"\n                        }}>\n                            <td>Gillette</td>\n                            <td>Razor Package 135Xg</td>\n                            <td>1225434DLX</td>\n                            <td>{Math.floor(this.props.statistics.itemPipelineTimeInSeconds(this.selected) / 60 / 60 / 24)} days</td>\n                            <td style={{\n                                fontWeight: 'bold',\n                                fontSize: 16,\n                                color: '#769806'\n                            }}>OK</td>\n                        </tr>\n                    </table>\n                </div>\n            </div>}\n            {this.selected && this.ready && <div>\n                <div style={{\n                    display: 'inline-block',\n                    fontWeight: 'bold',\n                    fontSize: 21,\n                    padding: '32px 15px 32px 0',\n                    borderBottom: \"solid 0.5px #ebedf8\",\n                    width: \"100%\"\n                }}>Item history</div>\n                <div>\n                    <div className={'item-history-table'}>\n                        <table>\n                            <tr>\n                                <td></td>\n                                <td>Gateway</td>\n                                <td>Gateway ID</td>\n                                <td>Event Type</td>\n                                <td>Event Value</td>\n                                <td>Date</td>\n                                <td>Time</td>\n                            </tr>\n                            {\n                                _.sortBy(records, r => -r.timestampInSeconds()).slice(this.pageSize * this.currentPage, this.pageSize * (this.currentPage + 1))\n                                    .map(r => <tr>\n                                        <td className={'record-id-cell'}>Record {r.recordId()}</td>\n                                        <td style={{textAlign: 'left'}}>\n                                            <div style={{\n                                                verticalAlign: 'middle',\n                                                width: 30,\n                                                height: 30,\n                                                backgroundImage: `url(${this.props.gatewayConfig.gatewayImage(r.gatewayId())})`,\n                                                backgroundSize: 'contain',\n                                                backgroundRepeat: 'no-repeat',\n                                                whiteSpace: 'nowrap',\n                                                backgroundPosition: 'center',\n                                                display: 'inline-block'\n                                            }}/>\n                                            &nbsp;&nbsp;&nbsp;{r.gatewayAlias()}\n                                        </td>\n                                        <td> {r.gatewayId()} </td>\n                                        <td> {r.eventType()} </td>\n                                        <td> {r.eventValue()} </td>\n                                        <td>{`${twodigits(r.timestampAsDate().getDate())} ${r.timestampAsDate().toLocaleString('default', { month: 'short' })}, ${r.timestampAsDate().getFullYear()}`}</td>\n                                        <td>{`${twodigits(r.timestampAsDate().getHours())}:${twodigits(r.timestampAsDate().getMinutes())}`}</td>\n                                    </tr>)\n                            }\n                        </table>\n                        <TablePagination\n                            rowsPerPageOptions={[5, 10]}\n                            component=\"div\"\n                            count={records.length}\n                            rowsPerPage={this.pageSize}\n                            page={this.currentPage}\n                            onChangePage={(e, page) => this.currentPage = page}\n                            onChangeRowsPerPage={(e) => {\n                                this.pageSize = parseInt(e.target.value)\n                            }}\n                        />\n                        {this.isOperatorDialogOpen() && <Dialog onClose={() => this.closeOperatorDialog()} aria-labelledby=\"Scan Operator Details\" open={this.isOperatorDialogOpen()}>\n                            <div style={{fontSize: 20, fontWeight: 'bold', margin: 20}}>Scan Operator Details</div>\n                            <DialogContent style={{textAlign: 'left'}}>\n                                You are attempting to retrieve operator details of scan { this.scanRecordForOperatorRetreival.recordId() }.<br/><br/>\n                                <b>Note - this action will be logged!</b><br/><br/>\n                                <div style={{textAlign: 'center'}}>\n                                    {\n                                        this.retrievingDetails ? <CircularProgress/>\n                                        : !this.operatorDetails ? <Button variant=\"contained\" color=\"primary\" onClick={() => this.retreiveOperatorDetails()}>RETRIEVE OEPRATOR DETAILS</Button>\n                                            : <span>Full name: <b>{this.operatorDetails}</b></span>\n                                    }\n                                </div>\n                                <DialogActions>\n                                    <Button autoFocus onClick={() => this.closeOperatorDialog()} color=\"primary\" style={{marginTop: 20}}>\n                                        {this.operatorDetails ? 'DONE' : 'CANCEL'}\n                                    </Button>\n                                </DialogActions>\n                            </DialogContent>\n                        </Dialog>}\n                    </div>\n                </div>\n            </div>}\n        </div>\n        </div>\n    }\n\n    @observable retrievingDetails = false;\n    @observable operatorDetails = null;\n\n    private retreiveOperatorDetails() {\n        this.retrievingDetails = true;\n        setTimeout(() => {\n            this.retrievingDetails = false;\n            this.operatorDetails = this.scanRecordForOperatorRetreival.operatorFullName();\n        }, 3000)\n    }\n\n    @observable scanRecordForOperatorRetreival: ScanRecord;\n\n    private openOperatorRetreivalDialog(r: ScanRecord) {\n        this.scanRecordForOperatorRetreival = r;\n    }\n\n    private closeOperatorDialog() {\n        this.scanRecordForOperatorRetreival = null;\n        this.operatorDetails = null;\n    }\n\n    private isOperatorDialogOpen(): boolean {\n        return this.scanRecordForOperatorRetreival != null;\n    }\n}\n","import * as _ from \"lodash\";\nimport React from \"react\";\n\nconst scale = 0.6;\n\nclass Bar extends React.Component<{\n                 label: string,\n                 value: number,\n                 color: string,\n                 image: string,\n                 percent: number\n             }, {}> {\n\n    toRunOnMount = [];\n\n    componentDidMount() {\n        const fs = this.toRunOnMount;\n        this.toRunOnMount = null;\n        fs.forEach(f => f());\n    }\n\n    runOnMount(f) {\n        if (this.toRunOnMount == null) {\n            f();\n        } else {\n            this.toRunOnMount.push(f);\n        }\n    }\n\n    render() {\n        const {label, value, color, image, percent} = this.props;\n\n        return <div style={{\n            display: 'flex',\n            flexDirection: 'column',\n            margin: \"0 3px\"\n        }}>\n            <div\n                style={{flex: 1, display: \"flex\", flexDirection: \"column\", alignContent: 'flex-end', paddingBottom: 5}}>\n                <div style={{flex: 1}}/>\n                <div style={{textAlign: 'center', fontSize: 40 * scale, paddingBottom: 3}}>{value}</div>\n                <div style={{\n                    backgroundColor: color,\n                    height: 0,\n                    transition: 'height 1s'\n                }} ref={e => this.runOnMount(() => {\n                    setTimeout(() => {\n                        if (e) e.style.height = `${Math.ceil(percent * 100)}%`\n                    }, 10);\n                })}/>\n            </div>\n            <div style={{\n                height: 124 * scale + 10,\n                width: 134 * scale,\n                backgroundColor: \"#e9e9e9\",\n                boxSizing: 'border-box',\n                display: 'flex',\n                flexDirection: 'column',\n                fontSize: 16 * scale,\n                color: \"#060606\",\n                alignItems: 'center'\n            }}>\n                <div style={{\n                    height: 70 * scale,\n                    minHeight: 70 * scale,\n                    width: 70 * scale,\n                    minWidth: 70 * scale,\n                    marginTop: 20 * scale,\n                    backgroundImage: `url(${image})`,\n                    backgroundPosition: 'center',\n                    backgroundRepeat: 'no-repeat',\n                    backgroundSize: 'contain',\n                }}/>\n                <span style={{\n                    textAlign: 'center',\n                    paddingTop: 5,\n                    paddingBottom: 20 * scale,\n                    wordBreak: 'break-word'\n                }}>{label}</span>\n            </div>\n        </div>\n    }\n}\n\nexport class BarChart extends React.Component<{\n    labels: string[],\n    values: number[],\n    colors: string[],\n    images: string[]\n}, {}> {\n\n    render() {\n        const {labels, values, colors, images} = this.props;\n        const maxValue = _.max(values);\n        return <div style={{\n            width: '100%',\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'center'\n        }}>\n            {labels.map(\n                (l, i) => <Bar\n                    label={labels[i]}\n                    value={values[i]}\n                    image={images[i]}\n                    color={colors[i % colors.length]}\n                    percent={maxValue == 0 ? 0 : values[i] / maxValue}\n                />\n            )}\n            {/*{[labels[0], labels[1], labels[2], labels[3]].map(*/}\n            {/*    (l, i) => <Bar*/}\n            {/*        label={labels[i]}*/}\n            {/*        value={values[i]}*/}\n            {/*        image={images[i]}*/}\n            {/*        color={colors[i % colors.length]}*/}\n            {/*        percent={maxValue == 0 ? 0 : values[i] / maxValue}*/}\n            {/*    />*/}\n            {/*)}*/}\n        </div>\n    }\n\n}\n","import React from \"react\";\nimport {AlertType, AlertTypes, IAlert} from \"./alerts\";\nimport * as _ from \"lodash\";\nimport {IAdjacentScansAlert, IRepeatedScanAlert, ITooManyScansAlert} from \"./statistics\";\nimport {ILargeQuantityWentDarkAlert} from \"./shrinkage-alerts\";\nimport {MenuItem, Select, TablePagination} from \"@material-ui/core\";\nimport {observer} from \"mobx-react\";\nimport {observable} from \"mobx\";\n\nconst twodigits = (n:number) => (n < 10 ? '0' : '') + n.toString();\n\n@observer\nexport class AlertsTable extends React.Component<{alerts: IAlert[], style?: any}> {\n    @observable private rowsPerPage: number = 5;\n    @observable private page: number = 0;\n\n    @observable alertTypeFilter: AlertType | \"all\" = \"all\";\n\n    render() {\n        const {alerts} = this.props;\n        const filteredAlerts = alerts.filter(a => this.alertTypeFilter == \"all\" || a.alertType == this.alertTypeFilter);\n        return <div style={{...this.props.style}}>\n            <div style={{textAlign: 'right', paddingRight: 20}}>\n                <div style={{display: 'inline-block', paddingRight: 10}}>Show only:</div>\n                <Select value={this.alertTypeFilter} onChange={(e) => {\n                    this.alertTypeFilter = e.target.value as AlertType;\n                    this.page = 0;\n                }}>\n                    <MenuItem value={\"all\"}>- All -</MenuItem>\n                    {AlertTypes.map(a => <MenuItem value={a}>{a}</MenuItem>)}\n                </Select>\n            </div>\n            <table className={\"alerts-table\"} style={{maxWidth: \"100%\"}}>\n                <tr>\n                    <td>TIMESTAMP</td>\n                    <td>CATEGORY</td>\n                    <td>ALERT TYPE</td>\n                    <td>ITEM ID</td>\n                    <td>GATEWAY</td>\n                    <td>DESCRIPTION</td>\n                </tr>\n                {filteredAlerts.length ?\n                    _.sortBy(filteredAlerts, alert => -alert.timestamp.getTime())\n                    .slice(this.page * this.rowsPerPage, (this.page+1) * this.rowsPerPage)\n                    .map((alert: IAlert) => <tr>\n                        <td style={{whiteSpace: \"nowrap\"}}>{alert.timestamp.toDateString()} {twodigits(alert.timestamp.getHours())}:{twodigits(alert.timestamp.getMinutes())}</td>\n                        <td style={{whiteSpace: \"nowrap\"}}>{alert.category}</td>\n                        <td style={{whiteSpace: \"nowrap\"}}>{alert.alertType}</td>\n                        <td style={{whiteSpace: \"nowrap\"}}>{alert.itemId}</td>\n                        <td style={{whiteSpace: \"nowrap\"}}>{alert.gatewayId}</td>\n                        <td style={{width: \"100%\"}}>{\n                            // alert.alertType == 'Repeated Scan' ?\n                            //     <span> Item was scanned twice at location <i>{(alert as IRepeatedScanAlert).location}</i> (previous scan was at {(alert as IRepeatedScanAlert).prevTime.toDateString()})</span>\n                            //     : alert.alertType == 'Too Many Scans' ?\n                            //     <span> Item was scanned <b>{(alert as ITooManyScansAlert).count}</b> times</span>\n                            //     : alert.alertType == 'Adjacent Scans' ?\n                            //         <span> Detected two consecutive scans in different locations in under <b>{Math.ceil((alert as IAdjacentScansAlert).deltaInMs / 1000 / 60)}</b> minutes.</span>\n                            //         :\n                            alert.alertType == 'Inventory Not On Shelf' ?\n                            <span>Customer shelf contains less than 3 items.</span>\n                                : alert.alertType == 'Backroom Inventory Low' ?\n                                    <span>Customer backroom is empty.</span>\n                                    : alert.alertType == 'Item Skipped POS' ?\n                                        <span>Item went from shelf to front door, skipped point-of-sale.</span>\n                                        : alert.alertType == 'Item Went Dark' ?\n                                            <span>On-shelf item did not scan for more than {Math.floor((Date.now() - alert.timestamp.getTime()) / 60 / 60 / 1000)} hours.</span>\n                                            : alert.alertType == 'Large Quantity Went Dark' ?\n                                                <span> <b>{(alert as ILargeQuantityWentDarkAlert).quantity}</b> items went dark.</span>\n                                                :\n                                                <span></span>\n                        }</td>\n                    </tr>)\n                :   <tr><td colSpan={6} style={{textAlign: \"center\", color: \"grey\"}}>- No Alerts - </td></tr>\n                }\n            </table>\n            <TablePagination\n                rowsPerPageOptions={[5, 10]}\n                component=\"div\"\n                count={filteredAlerts.length}\n                rowsPerPage={this.rowsPerPage}\n                page={this.page}\n                onChangePage={(e, page) => this.page = page}\n                onChangeRowsPerPage={(e) => {\n                    this.rowsPerPage = parseInt(e.target.value)\n                }}\n            />\n        </div>\n    }\n\n}\n","import React from \"react\";\nimport * as _ from 'lodash';\nimport {inject, observer} from \"mobx-react\";\nimport {\n    AdjacentScansAlertThresholdMs, IAdjacentScansAlert,\n    IRepeatedScanAlert,\n    ITooManyScansAlert,\n    Statistics,\n    TooManyScansAlertThreshold\n} from \"./statistics\";\nimport {BarChart} from \"./bar-chart\";\nimport {computed, observable, toJS} from \"mobx\";\nimport {gatewayImage, partnerBrandImage, stageImage} from \"./resources\";\nimport {TablePagination} from \"@material-ui/core\";\nimport {stages, stagesDisplay} from \"./record\";\nimport {GatewayConfig} from \"./gateway-config\";\nimport {OSAAlerts} from \"./osa-alerts\";\nimport {IAlert} from \"./alerts\";\nimport {\n    GOING_DARK_TIMEOUT,\n    ILargeQuantityWentDarkAlert,\n    LARGE_QTY_WENT_DARK_THRESHOLD,\n    ShrinkageAlerts\n} from \"./shrinkage-alerts\";\nimport {AlertsTable} from \"./alerts-table\";\n\n@observer\nclass Databox extends React.Component<{\n    title: string,\n    data: number\n    subText?: string\n    decimals?: number\n}, {}> {\n\n    @observable initDisplayedData: number = 0;\n    @observable finalDisplayedData: number = null;\n    @observable initial = true;\n\n    mounted = false;\n\n    format(v: number): string {\n        if (this.props.decimals) {\n            return `${Math.floor(v)}.${Math.floor(v * 10) % 10}`;\n        } else {\n            return `${v}`\n        }\n    }\n\n    componentDidMount() {\n        this.mounted = true;\n        const duration = 1000;\n        const data = this.props.data || 0;\n        const mountedAt = Date.now();\n        const update = () => {\n            if (this.mounted) {\n                const delta = Date.now() - mountedAt;\n                if (delta < duration) {\n                    this.initDisplayedData = Math.floor(data * (delta / duration));\n                    requestAnimationFrame(update);\n                } else {\n                    this.finalDisplayedData = data;\n                    this.initial = false;\n                }\n            }\n        };\n        update();\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n\n    componentDidUpdate() {\n        this.finalDisplayedData = this.props.data;\n    }\n\n    render() {\n        return <div className={'databox'}>\n            <div className={'databox-title'}>{this.props.title}</div>\n            <div className={'databox-infotext'}>\n                <span>{this.format(this.initial ? this.initDisplayedData : this.finalDisplayedData)}</span>\n                {this.props.subText &&\n                    <div className={'databox-subtext'}>\n                        <span>{this.props.subText}</span>\n                    </div>\n                }\n            </div>\n        </div>\n    }\n\n}\n\n@inject('statistics', 'gatewayConfig', 'osaAlerts', 'shrinkageAlerts')\n@observer\nexport class OverviewPage extends React.Component<{\n    statistics: Statistics,\n    gatewayConfig: GatewayConfig,\n    osaAlerts: OSAAlerts\n    shrinkageAlerts: ShrinkageAlerts\n}, {}> {\n    @observable private rowsPerPage: number = 5;\n    @observable private page: number = 0;\n    render() {\n        const gateways = this.props.gatewayConfig.all().map(cfg => cfg.ID);\n\n        return <div style={{\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'row',\n            // flexWrap: 'wrap',\n            justifyContent: 'center',\n        }}>\n            <div style={{display: 'flex', flexDirection:'column', flex: 1, borderRight: '1px solid #ebedf8'}}>\n                <div style={{\n                    display: \"flex\",\n                    flexDirection: \"row\",\n                    flexWrap: 'wrap'\n                }}>\n                    <div style={{flex: 1, marginTop: 50}}>\n                        <div className=\"title\" style={{\n                            height: 46,\n                            borderBottom: '1px solid #ebedf8',\n                            alignItems: 'start'\n                        }}>\n                            <span>Products by gateway</span>\n                        </div>\n                        <div style={{height: 300, padding: 20, borderBottom: '1px solid #ebedf8'}}>\n                            <BarChart\n                                colors={[\"#035093\", \"#035093\", \"#4889c2\", \"#0a4171\"]}\n                                images={gateways.map(gateway => this.props.gatewayConfig.gatewayImage(gateway))}\n                                labels={gateways.map(gw => this.props.gatewayConfig.getFor(gw).Alias)}\n                                values={gateways.map(gateway => this.props.statistics.itemCountByGateway(gateway))}\n                            />\n                        </div>\n                    </div>\n                </div>\n                {this.renderAlertsSection()}\n            </div>\n            <div style={{\n                letterSpacing: 1.13,\n                fontSize: 19,\n            }}>\n                {this.renderDataSection()}\n            </div>\n        </div>\n    }\n\n    @computed get allAlerts(): IAlert[] {\n        return this.props.osaAlerts.alerts\n            .concat(this.props.shrinkageAlerts.alerts)\n    }\n\n    @computed get alertedItemsCount(): number {\n        return _.uniq(\n            this.allAlerts\n            .map(a => a.itemId)\n            .filter(x => x)\n        ).length;\n    }\n\n    @computed get suspectedCounterfietCount(): number {\n        return _.uniq(\n            this.props.shrinkageAlerts.alerts\n            .map(a => a.itemId)\n            .filter(x => x)\n        ).length;\n    }\n\n    private renderAlertsSection() {\n        const inventoryNotOnShelfAlerts = this.props.osaAlerts.inventoryNotOnShelfAlerts;\n        const backroomInventoryLowAlerts = this.props.osaAlerts.backroomInventoryLowAlerts;\n        const itemSkippedPOSAlerts = this.props.shrinkageAlerts.itemSkippedPOSAlerts;\n        const itemWentDarkAlerts = this.props.shrinkageAlerts.itemWentDarkAlerts;\n        const largeQtyWentDarkAlerts = this.props.shrinkageAlerts.largeQuantityWentDarkAlerts;\n        const alerts = inventoryNotOnShelfAlerts\n            .concat(backroomInventoryLowAlerts)\n            .concat(itemSkippedPOSAlerts)\n            .concat(itemWentDarkAlerts)\n            .concat(largeQtyWentDarkAlerts);\n\n        return <div style={{marginLeft: 50}}>\n            <div style={{\n                height: 50,\n                borderBottom: '1px solid #ebedf8',\n                display: 'flex',\n                flexDirection: 'row',\n                alignItems: 'center'\n            }}>\n                <img src={process.env.REACT_APP_BASE_URL + \"/alert.svg\"} alt={\"alert\"} style={{padding: \"0 10px\"}}/> <span>Alerts</span>\n            </div>\n            {\n                alerts.length > 0 ?\n                    <div className={\"alerts\"}>\n                        <ul>\n                            {alerts.length == 1 && <li>There is <b>1</b> active alert</li>}\n                            {alerts.length > 1 && <li>There are <b>{alerts.length}</b> alerts active</li>}\n                        </ul>\n                        <AlertsTable alerts={alerts}/>\n                    </div>\n                    : <div style={{color: '#bebebe', margin: 10}}>- None -</div>\n            }\n\n        </div>\n    }\n\n    private renderDataSection() {\n        const {statistics} = this.props;\n        return <div style={{\n            width: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center'\n        }}>\n            <div className={\"title\"} style={{\n                height: 96,\n                width: '100%',\n                borderBottom: '1px solid #ebedf8',\n            }}><span style={{marginTop: 22}}>Data</span></div>\n            <div style={{margin:\"30px 30px 0 30px\"}}>\n                <table className={'data-table'}>\n                    <tr>\n                        <td className={'border-right border-bottom'}><Databox title={\"Alerted Products\"} data={this.alertedItemsCount}/></td>\n                        <td className={'border-left border-bottom'}><Databox title={\"Avg. Time in pipeline\"} data={statistics.avgPiplineTimePerItemInDays} subText={\"DAYS\"} decimals={1}/></td>\n                    </tr>\n                    <tr>\n                        <td className={'border-right border-top'}><Databox title={\"Suspected counterfeit\"} data={this.suspectedCounterfietCount}/></td>\n                        <td className={'border-left border-top'}><Databox title={\"Avg. scans per item\"} data={statistics.avgRecordsPerItem} decimals={1}/></td>\n                    </tr>\n                </table>\n                <div style={{\n                    borderBottom: \"1px solid #ebedf8\",\n                    height: 0\n                }}/>\n                <div style={{\n                    fontSize: 16,\n                    color: '#060606',\n                    margin: '40px 0 40px'\n                }}>\n                    Items Location\n                </div>\n                <img src={process.env.REACT_APP_BASE_URL + \"/worldmap.svg\"} style={{width: '100%'}} alt=\"Route tracking\"/>\n            </div>\n        </div>\n    }\n}\n","import * as _ from \"lodash\";\nimport {computed} from \"mobx\";\nimport {ScanRecord} from \"./record\";\nimport {Statistics} from \"./statistics\";\nimport {GatewayConfig} from \"./gateway-config\";\nimport {RecordStore} from \"./record-store\";\n\nexport class OSAStats {\n\n    constructor(private gatewayId: string, private records: RecordStore, private statistics: Statistics, private gatewayConfig: GatewayConfig) {}\n\n    @computed get itemCountAtGateway(): number {\n        return this.statistics.itemCountByGateway(this.gatewayId);\n    }\n\n    @computed get itemCountAtBackroom(): number {\n        return this.statistics.itemCountByGateway(this.gatewayConfig.getFor(this.gatewayId).BackroomGatewayId);\n    }\n\n    @computed get turnoverTimes(): {[itemId: string]: number} {\n        const lastItemScan: {[itemId: string]: ScanRecord} = {};\n        const turnoverTimes:  {[itemId: string]: number} = {};\n\n        for (const rec of this.records.records) {\n            const prev = lastItemScan[rec.itemId()];\n            if (prev && prev.gatewayId().toLowerCase() == this.gatewayId.toLowerCase()) {\n                if (rec.gatewayId().toLowerCase() != this.gatewayId.toLowerCase()) {\n                    turnoverTimes[rec.itemId()] = rec.timestampInMilliseconds() - prev.timestampInMilliseconds();\n                }\n            } else {\n                lastItemScan[rec.itemId()] = rec;\n            }\n        }\n\n        return turnoverTimes;\n    }\n\n    @computed get avgTurnoverTime(): number {\n        const times = this.turnoverTimes;\n        return Object.keys(times).length > 0 ? _.mean(_.values(times)) : 0;\n    }\n\n    turnoverTimeHistogram(nBins: number): {bins: number[], binSize: number} {\n        const times = _.values(this.turnoverTimes);\n        const bins = _.range(nBins).map(() => 0);\n        const binSize = (_.max(times) + 1) / nBins;\n\n        for (const t of times) {\n            bins[Math.floor(t / binSize)]++;\n        }\n\n        return {bins, binSize};\n    }\n\n    itemCountHistory(gatewayId: string): Array<{time: number, count: number}> {\n        const itemLoc: {[itemId: string]: string} = {};\n        const history: Array<{time: number, count: number}> = [];\n        let count = 0;\n\n        for (const rec of this.records.records) {\n            const prev = itemLoc[rec.itemId()];\n            const current = rec.gatewayId();\n            if (prev && prev.toLowerCase() == gatewayId.toLowerCase()) {\n                if (current.toLowerCase() != this.gatewayId.toLowerCase()) {\n                    count--;\n                    history.push({time: rec.timestampInMilliseconds(), count});\n                }\n            } else if (current.toLowerCase() == this.gatewayId.toLowerCase()){\n                count++;\n                history.push({time: rec.timestampInMilliseconds(), count});\n            }\n            itemLoc[rec.itemId()] = rec.gatewayId();\n        }\n\n        return history;\n    }\n\n    @computed get gatewayItemCountHistory(): Array<{time: number, count: number}> {\n        return this.itemCountHistory(this.gatewayId);\n    }\n\n    @computed get backroomItemCountHistory(): Array<{time: number, count: number}> {\n        const backroomId = this.gatewayConfig.getFor(this.gatewayId).BackroomGatewayId;\n        if (backroomId) {\n            return this.itemCountHistory(backroomId);\n        } else {\n            return [];\n        }\n    }\n}\n\n\n","import React from \"react\";\nimport {Alert, AlertTitle} from \"@material-ui/lab\";\n\n\nexport class ErrorPage extends React.Component<{err: Error}, {}> {\n\n    render() {\n        return <div style={{display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100%', textAlign: 'left'}}>\n            <Alert severity=\"error\">\n                <AlertTitle>Error</AlertTitle>\n                We were unable to load the page at the moment. Please try again. <br/>\n                <span style={{color: \"#bebebe\"}}><pre>{this.props.err.toString()}</pre></span>\n            </Alert>\n        </div>\n    }\n\n}\n","import React from \"react\";\nimport * as _ from \"lodash\";\nimport {inject, observer} from \"mobx-react\";\nimport {Statistics} from \"./statistics\";\nimport {observable, reaction} from \"mobx\";\nimport {Button, CircularProgress, DialogTitle, TablePagination, TextField} from \"@material-ui/core\";\nimport {Autocomplete, createFilterOptions} from \"@material-ui/lab\";\nimport {gatewayImage, partnerBrandImage, stageImage} from \"./resources\";\nimport {ScanRecord, stagesDisplay} from \"./record\";\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport {GatewayConfig, IGatewayConfigRecord} from \"./gateway-config\";\nimport {OSAStats} from \"./osa-stats\";\nimport {RecordStore} from \"./record-store\";\nimport {BarChart} from \"./bar-chart\";\nimport {ErrorPage} from \"./error-page\";\nimport {Bar, Line} from 'react-chartjs-2';\nimport moment from \"moment\";\nimport {PageHeader} from \"./page-header\";\nimport {AlertsTable} from \"./alerts-table\";\nimport {OSAAlerts} from \"./osa-alerts\";\n\nconst twodigits = (n:number) => (n < 10 ? '0' : '') + n.toString();\n\nconst prettyFloat = (f: number) => `${Math.floor(f*10)/10}`;\n\nconst formatTurnoverTime = (tMs: number): string => {\n    const MINUTE_MS = 60*1000;\n    const HOUR_MS = 60*MINUTE_MS;\n    const DAY_MS = 24*HOUR_MS;\n    if (tMs < HOUR_MS) {\n        const minutes = tMs / MINUTE_MS;\n        return `${prettyFloat(minutes)} Minutes`\n    }\n    if (tMs < DAY_MS) {\n        const hours = tMs / HOUR_MS;\n        return `${prettyFloat(hours)} Hours`\n    }\n\n    const days = tMs / DAY_MS;\n    return `${prettyFloat(days)} Days`\n\n};\n\n@inject(\"statistics\", \"gatewayConfig\", \"records\", \"osaAlerts\")\n@observer\nexport class OnShelfAvailabilityPage extends React.Component<{statistics: Statistics, gatewayConfig: GatewayConfig, records: RecordStore, osaAlerts: OSAAlerts}, {}> {\n\n    @observable private ready = false;\n    private currentTimeoutHandle;\n\n    @observable selectedGatewayId: string;\n    @observable osaStats: OSAStats;\n\n    componentDidMount() {\n        const first = this.props.gatewayConfig.customerRetailShelves[0];\n        if (first) {\n            this.selectedGatewayId = first.ID;\n        }\n        this.loadData();\n    }\n\n    loadData() {\n        const gatewayId = this.selectedGatewayId;\n        if (this.props.gatewayConfig.getFor(gatewayId) == null) {\n            return;\n        }\n\n        this.ready = false;\n        if (this.currentTimeoutHandle) {\n            clearTimeout(this.currentTimeoutHandle);\n        }\n        this.currentTimeoutHandle = setTimeout(() => {\n            this.ready = true;\n            this.currentTimeoutHandle = null;\n            this.osaStats = new OSAStats(gatewayId, this.props.records, this.props.statistics, this.props.gatewayConfig);\n        }, 1000);\n    }\n\n    componentWillUnmount() {\n        if (this.currentTimeoutHandle) {\n            clearTimeout(this.currentTimeoutHandle);\n        }\n    }\n\n    render() {\n        if (this.props.gatewayConfig.customerRetailShelves.length == 0) {\n            return <ErrorPage err={new Error(\"Gateway config does not appear to contain a shelf gateway. Please make sure there is at least one gateway with LocationType set to 'Customer Retail Shelf', and that the gateway is configured with a BackroomGatewayID. \")}/>\n        }\n        const turnoverTimeHistogram = this.osaStats ? this.osaStats.turnoverTimeHistogram(10) : null;\n        return <div>\n            <PageHeader title={\"OSA Dashboard\"}/>\n            {!this.ready ?\n                <div style={{padding: 10}}><CircularProgress/></div>\n            : <div style={{width: 1200}}>\n                <div style={{margin: \"0 0 30px 30px\"}}>\n                <div style={{display: 'flex', alignItems: 'center'}}>\n                    <div style={{\n                        fontWeight: 'bold',\n                        fontSize: 21,\n                        padding: '32px 15px 32px 0'\n                    }}>Select a shelf gateway:</div>\n                    <Autocomplete\n                        options={this.props.gatewayConfig.customerRetailShelves.map(c => c.ID)}\n                        getOptionLabel={(gwId) => {\n                            const cfg = this.props.gatewayConfig.getFor(gwId);\n                            return `${cfg.ID} ${ cfg.Alias ? `- ${cfg.Alias}` : ''}`;\n                        }}\n                        style={{width: 600}}\n                        onChange={(e, value) => {\n                            this.selectedGatewayId = value;\n                            this.loadData();\n                        }}\n                        value={this.selectedGatewayId}\n                        renderInput={params => <TextField {...params} label=\"Gateway ID\" variant=\"outlined\" />}\n                    />\n                    {!this.ready && <CircularProgress style={{marginLeft: 20}}/>}\n                </div>\n                { this.osaStats && <div>\n                    <div style={{display: 'flex', flexDirection: 'row', paddingBottom: 20, borderBottom: '1px solid grey'}}>\n                        <div style={{borderRight: \"1px solid grey\"}}>\n                            {this.metricBox(\"ITEMS ON SHELF\", \"#1d6aac\", process.env.REACT_APP_BASE_URL + '/shelf-white.svg', this.osaStats.itemCountAtGateway)}\n                            {this.metricBox(\"ITEMS IN STOREROOM\", \"#008a91\", process.env.REACT_APP_BASE_URL + '/storeroom-white.svg', this.osaStats.itemCountAtBackroom)}\n                        </div>\n                        <div style={{flex: 1, padding: \"0 10px\"}}>\n                            <div style={{width: 800}}>\n                                <Line\n                                    data={{\n                                        // labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n                                        datasets: [\n                                            {\n                                                label: 'Shelf Item Count',\n                                                fill: false,\n                                                lineTension: 0.1,\n                                                backgroundColor: 'rgba(75,192,192,0.4)',\n                                                borderColor: 'rgba(75,192,192,1)',\n                                                borderCapStyle: 'butt',\n                                                borderDash: [],\n                                                borderDashOffset: 0.0,\n                                                borderJoinStyle: 'miter',\n                                                pointBorderColor: 'rgba(75,192,192,1)',\n                                                pointBackgroundColor: '#fff',\n                                                pointBorderWidth: 1,\n                                                pointHoverRadius: 5,\n                                                pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                                                pointHoverBorderColor: 'rgba(220,220,220,1)',\n                                                pointHoverBorderWidth: 2,\n                                                pointRadius: 1,\n                                                pointHitRadius: 10,\n                                                data: this.osaStats.gatewayItemCountHistory.map(x => ({t: x.time, y: x.count}))\n                                            },\n                                            {\n                                                label: 'Storeroom Item Count',\n                                                fill: false,\n                                                lineTension: 0.1,\n                                                backgroundColor: 'rgba(75,0,192,0.4)',\n                                                borderColor: 'rgba(75,0,192,1)',\n                                                borderCapStyle: 'butt',\n                                                borderDash: [],\n                                                borderDashOffset: 0.0,\n                                                borderJoinStyle: 'miter',\n                                                pointBorderColor: 'rgba(75,0,192,1)',\n                                                pointBackgroundColor: '#fff',\n                                                pointBorderWidth: 1,\n                                                pointHoverRadius: 5,\n                                                pointHoverBackgroundColor: 'rgba(75,0,192,1)',\n                                                pointHoverBorderColor: 'rgba(220,0,220,1)',\n                                                pointHoverBorderWidth: 2,\n                                                pointRadius: 1,\n                                                pointHitRadius: 10,\n                                                data: this.osaStats.backroomItemCountHistory.map(x => ({t: new Date(x.time), y: x.count}))\n                                            },\n                                        ]\n                                    }}\n                                  width={800}\n                                  height={300}\n                                  options={{\n                                      scales: {\n                                          xAxes: [{\n                                              type: 'time',\n                                              distribution: 'linear',\n                                              offset: true,\n                                              // ticks: {\n                                              //     major: {\n                                              //         enabled: true,\n                                              //         fontStyle: 'bold'\n                                              //     },\n                                              //     source: 'data',\n                                              //     autoSkip: true,\n                                              //     autoSkipPadding: 75,\n                                              //     // maxRotation: 0,\n                                              //     sampleSize: 100\n                                              // },\n                                              // afterBuildTicks: function(scale: any, ticks: any) {\n                                              //     var majorUnit = scale._majorUnit;\n                                              //     var firstTick = ticks[0];\n                                              //     var i, ilen, val, tick, currMajor, lastMajor;\n                                              //\n                                              //     val = moment(ticks[0].value);\n                                              //     if ((majorUnit === 'minute' && val.second() === 0)\n                                              //         || (majorUnit === 'hour' && val.minute() === 0)\n                                              //         || (majorUnit === 'day' && val.hour() === 9)\n                                              //         || (majorUnit === 'month' && val.date() <= 3 && val.isoWeekday() === 1)\n                                              //         || (majorUnit === 'year' && val.month() === 0)) {\n                                              //         firstTick.major = true;\n                                              //     } else {\n                                              //         firstTick.major = false;\n                                              //     }\n                                              //     lastMajor = val.get(majorUnit);\n                                              //\n                                              //     for (i = 1, ilen = ticks.length; i < ilen; i++) {\n                                              //         tick = ticks[i];\n                                              //         val = moment(tick.value);\n                                              //         currMajor = val.get(majorUnit);\n                                              //         tick.major = currMajor !== lastMajor;\n                                              //         lastMajor = currMajor;\n                                              //     }\n                                              //     return ticks;\n                                              // }\n                                          }],\n                                          yAxes: [{\n                                              ticks: {\n                                                  beginAtZero:true\n                                              }\n                                          }]\n                                      },\n                                      maintainAspectRatio: false,\n                                      legend: {display: true}\n                                  }}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                    <div style={{display: 'flex', flexDirection: 'row', paddingTop: 20}}>\n                        <div style={{padding: \"0 10px\", borderRight: \"1px solid grey\"}}>\n                            <div style={{width: 300, backgroundColor: \"#f8f8f8\", margin: \"50px 0\"}}>\n                                <div style={{textAlign: \"center\", padding: 20, fontWeight: 900, letterSpacing: '1.07px'}}>AVG TURNOVER TIME</div>\n                                <div style={{textAlign: \"center\", padding: \"40px 60px 60px 60px\", fontWeight: 'bold', fontSize: 30}}>{formatTurnoverTime(this.osaStats.avgTurnoverTime)}</div>\n                            </div>\n                        </div>\n                        <div style={{padding: \"0 10px\", width: 800, height: 300}}>\n                            <div style={{textAlign: 'center', fontWeight: 'bold'}}>TURNOVER TIME (histogram)</div>\n                            {/*<BarChart labels={_.range(10).map(s => s.toString())} values={this.osaStats.turnoverTimeHistogram(10).bins} colors={[\"black\"]} images={[]}/>*/}\n                            <Bar\n                                data={{\n                                    labels: _.range(turnoverTimeHistogram.bins.length).map((s, i) => '<'+formatTurnoverTime((i + 1)*turnoverTimeHistogram.binSize)),\n                                    datasets: [\n                                        {\n                                            label: 'Turnover Time',\n                                            backgroundColor: 'rgba(255,99,132,0.2)',\n                                            borderColor: 'rgba(255,99,132,1)',\n                                            borderWidth: 1,\n                                            hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n                                            hoverBorderColor: 'rgba(255,99,132,1)',\n                                            data: turnoverTimeHistogram.bins\n                                        }\n                                    ]\n                                }}\n                                width={800}\n                                height={200}\n                                options={{\n                                    maintainAspectRatio: false,\n                                    legend: {display: false},\n                                    scales: {\n                                        yAxes: [{\n                                            ticks: {\n                                                beginAtZero:true\n                                            }\n                                        }]\n                                    }\n                                }}\n                            />\n                        </div>\n                    </div>\n                </div> }\n                </div>\n                <div style={{margin: \"0 0 20px 20px\", fontWeight: 'bold'}}> OSA Alerts </div>\n                <AlertsTable alerts={this.props.osaAlerts.alerts}/>\n            </div>}\n        </div>\n    }\n\n    metricBox(title: string, color: string, iconUrl: string, count: number, style={}) {\n        return <div style={{width: 300, padding: 10, letterSpacing: \"1.07px\", ...style}}>\n            <div style={{backgroundColor: color, padding: 10, color: \"white\"}}>\n                <img src={iconUrl} style={{verticalAlign: \"middle\", paddingRight: 20, width: 30}}/>\n                <span style={{verticalAlign: \"middle\", fontSize: \"0.8em\"}}>{title}</span>\n            </div>\n            <div style={{\n                backgroundColor: \"#f8f8f8\",\n                textAlign: \"center\",\n                padding: \"20px 0\",\n                fontWeight: \"bold\",\n                fontSize: 30\n            }}>{count}</div>\n        </div>\n    }\n\n}\n","import React from \"react\";\nimport * as _ from \"lodash\";\nimport {inject, observer} from \"mobx-react\";\nimport {Statistics} from \"./statistics\";\nimport {observable, reaction} from \"mobx\";\nimport {GatewayConfig, IGatewayConfigRecord} from \"./gateway-config\";\nimport {RecordStore} from \"./record-store\";\nimport {ErrorPage} from \"./error-page\";\nimport {Line} from \"react-chartjs-2\";\nimport {ShrinkageAlerts} from \"./shrinkage-alerts\";\nimport {alertsByTime} from \"./alerts\";\nimport {PageHeader} from \"./page-header\";\nimport {AlertsTable} from \"./alerts-table\";\nimport {CircularProgress} from \"@material-ui/core\";\n\n@inject(\"statistics\", \"gatewayConfig\", \"records\", \"shrinkageAlerts\")\n@observer\nexport class ShrinkagePage extends React.Component<{statistics: Statistics, gatewayConfig: GatewayConfig, records: RecordStore, shrinkageAlerts: ShrinkageAlerts}, {}> {\n\n    @observable private ready = false;\n    private currentTimeoutHandle;\n\n    componentDidMount() {\n        this.loadData();\n    }\n\n    loadData() {\n        this.ready = false;\n        if (this.currentTimeoutHandle) {\n            clearTimeout(this.currentTimeoutHandle);\n        }\n        this.currentTimeoutHandle = setTimeout(() => {\n            this.ready = true;\n            this.currentTimeoutHandle = null;\n        }, 1000);\n    }\n\n    componentWillUnmount() {\n        if (this.currentTimeoutHandle) {\n            clearTimeout(this.currentTimeoutHandle);\n        }\n    }\n\n    render() {\n        if (this.props.gatewayConfig.all().length == 0) {\n            return <ErrorPage err={new Error(\"Gateway config appears to be empty. The shrinkage dashboard required a gateway config.\")}/>\n        }\n\n        const itemWentDarkAlertsByTime = alertsByTime(this.props.shrinkageAlerts.itemWentDarkAlerts, 30, 24*60*60*1000);\n        const itemSkippedPOSAlertsByTime = alertsByTime(this.props.shrinkageAlerts.itemSkippedPOSAlerts, 30, 24*60*60*1000);\n\n        return <div>\n            <PageHeader title={\"Shrinkage Dashboard\"}/>\n            {!this.ready ? <div style={{padding: 10}}><CircularProgress/></div> : <div style={{paddingLeft: 10, width: 1000}}>\n                <div style={{display: 'flex', flexDirection: 'row', width: \"100%\", justifyContent: 'center'}}>\n                    {this.metricBox(\"SUSPECTED STOLEN ITEMS\", \"PAST 24H\", this.props.shrinkageAlerts.alertedItemsCountLast24Hours, \"#8f5c5c\")}\n                    {this.metricBox(\"SUSPECTED STOLEN ITEMS\", \"PAST 30 DAYS\", this.props.shrinkageAlerts.alertedItemsCountLast30Days, \"#be8b8b\")}\n                </div>\n                <div style={{width: \"100%\", }}>\n                    <Line\n                        data={{\n                            // labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n                            datasets: [\n                                {\n                                    label: 'Item Went Dark',\n                                    fill: false,\n                                    lineTension: 0.1,\n                                    backgroundColor: 'rgba(75,192,192,0.4)',\n                                    borderColor: '#8f5c5c',\n                                    borderCapStyle: 'butt',\n                                    borderDash: [],\n                                    borderDashOffset: 0.0,\n                                    borderJoinStyle: 'miter',\n                                    pointBorderColor: '#8f5c5c',\n                                    pointBackgroundColor: '#fff',\n                                    pointBorderWidth: 1,\n                                    pointHoverRadius: 5,\n                                    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                                    pointHoverBorderColor: 'rgba(220,220,220,1)',\n                                    pointHoverBorderWidth: 2,\n                                    pointRadius: 3,\n                                    pointHitRadius: 10,\n                                    data: itemWentDarkAlertsByTime.bins.map((count, i) => ({t: itemWentDarkAlertsByTime.startTime + itemWentDarkAlertsByTime.binSize*i, y: count}))\n                                },\n                                {\n                                    label: 'Item Skipped POS',\n                                    fill: false,\n                                    lineTension: 0.1,\n                                    backgroundColor: 'rgba(75,192,192,0.4)',\n                                    borderColor: '#bbbbbb',\n                                    borderCapStyle: 'butt',\n                                    borderDash: [],\n                                    borderDashOffset: 0.0,\n                                    borderJoinStyle: 'miter',\n                                    pointBorderColor: '#bbbbbb',\n                                    pointBackgroundColor: '#fff',\n                                    pointBorderWidth: 3,\n                                    pointHoverRadius: 5,\n                                    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                                    pointHoverBorderColor: 'rgba(220,220,220,1)',\n                                    pointHoverBorderWidth: 2,\n                                    pointRadius: 1,\n                                    pointHitRadius: 10,\n                                    data: itemSkippedPOSAlertsByTime.bins.map((count, i) => ({t: itemSkippedPOSAlertsByTime.startTime + itemSkippedPOSAlertsByTime.binSize*i, y: count}))\n                                },\n                            ]\n                        }}\n                        width={800}\n                        height={300}\n                        options={{\n                            scales: {\n                                xAxes: [{\n                                    type: 'time',\n                                    distribution: 'linear',\n                                    offset: true,\n                                    // ticks: {\n                                    //     major: {\n                                    //         enabled: true,\n                                    //         fontStyle: 'bold'\n                                    //     },\n                                    //     source: 'data',\n                                    //     autoSkip: true,\n                                    //     autoSkipPadding: 75,\n                                    //     // maxRotation: 0,\n                                    //     sampleSize: 100\n                                    // },\n                                    // afterBuildTicks: function(scale: any, ticks: any) {\n                                    //     var majorUnit = scale._majorUnit;\n                                    //     var firstTick = ticks[0];\n                                    //     var i, ilen, val, tick, currMajor, lastMajor;\n                                    //\n                                    //     val = moment(ticks[0].value);\n                                    //     if ((majorUnit === 'minute' && val.second() === 0)\n                                    //         || (majorUnit === 'hour' && val.minute() === 0)\n                                    //         || (majorUnit === 'day' && val.hour() === 9)\n                                    //         || (majorUnit === 'month' && val.date() <= 3 && val.isoWeekday() === 1)\n                                    //         || (majorUnit === 'year' && val.month() === 0)) {\n                                    //         firstTick.major = true;\n                                    //     } else {\n                                    //         firstTick.major = false;\n                                    //     }\n                                    //     lastMajor = val.get(majorUnit);\n                                    //\n                                    //     for (i = 1, ilen = ticks.length; i < ilen; i++) {\n                                    //         tick = ticks[i];\n                                    //         val = moment(tick.value);\n                                    //         currMajor = val.get(majorUnit);\n                                    //         tick.major = currMajor !== lastMajor;\n                                    //         lastMajor = currMajor;\n                                    //     }\n                                    //     return ticks;\n                                    // }\n                                }],\n                                yAxes: [{\n                                    ticks: {\n                                        beginAtZero:true\n                                    }\n                                }]\n                            },\n                            maintainAspectRatio: false,\n                            legend: {display: true}\n                        }}\n                    />\n                </div>\n                <div style={{margin: \"20px 0 20px 20px\", fontWeight: 'bold'}}> Shrinkage Alerts </div>\n                <AlertsTable alerts={this.props.shrinkageAlerts.alerts}/>\n            </div>}\n        </div>\n    }\n\n    metricBox(title: string, subTitle: string, value: number, color: string) {\n        return <div style={{width: 300, textAlign: 'center', color: \"white\", letterSpacing: 1.07, fontSize: 12, padding: 15}}>\n            <div style={{padding: 10, backgroundColor: color}}>{title}</div>\n            <div style={{backgroundColor: \"#f8f8f8\", color: \"#3d3d3d\"}}>\n                <div style={{padding: \"15px 0 0 0\"}}>{subTitle}</div>\n                <div style={{padding: \"15px 0 25px 0\", fontWeight: \"bold\", fontSize: 25}}>{value}</div>\n            </div>\n        </div>\n    }\n}\n","import {ItemStatusPage} from \"./item-status-page\";\nimport {OverviewPage} from \"./overview-page\";\nimport {OnShelfAvailabilityPage} from \"./on-shelf-availability-page\";\nimport {ShrinkagePage} from \"./shrinkage-page\";\nimport {SettingsPage} from \"./settings-page\";\n\ntype RouteName = \"itemStatus\" | \"overview\" | \"onShelfAvailability\" | \"shrinkage\" | \"settings\";\n\nexport interface IRoute {\n  name: RouteName;\n  displayIndex: number;\n  cssClass: string;\n  path: string,\n  menuImg: string\n  component;\n}\n\nexport const routes: IRoute[] = [\n  {\n    name: 'settings',\n    path: '/settings',\n    menuImg: '/menu-item-settings.svg',\n    cssClass: 'settings',\n    displayIndex: 4,\n    component: SettingsPage\n  },\n  {\n    name: 'shrinkage',\n    path: '/shrinkage',\n    menuImg: '/menu-item-shrinkage.svg',\n    cssClass: 'shrinkage',\n    displayIndex: 3,\n    component: ShrinkagePage\n  },\n  {\n    name: 'onShelfAvailability',\n    path: '/osa',\n    menuImg: '/menu-item-osa.svg',\n    cssClass: 'osa',\n    displayIndex: 2,\n    component: OnShelfAvailabilityPage\n  },\n  {\n    name: 'itemStatus',\n    path: '/item_status',\n    menuImg: '/menu-item-status.svg',\n    cssClass: 'item-status',\n    displayIndex: 1,\n    component: ItemStatusPage\n  },\n  { // must be last\n    name: 'overview',\n    path: '/',\n    menuImg: '/menu-overview.svg',\n    cssClass: 'overview',\n    displayIndex: 0,\n    component: OverviewPage\n  }\n];\n\n\nexport function getCurrentRoute(): IRoute {\n  return routes.find(r => r.path == window.location.hash.slice(1)) || routes[routes.length - 1];\n}\n\nexport function getRoute(name: RouteName): IRoute {\n  return routes.find(r => r.name == name);\n}\n","import React from \"react\";\nimport * as _ from \"lodash\";\nimport {inject, observer} from \"mobx-react\";\nimport {Statistics} from \"./statistics\";\nimport {observable, reaction} from \"mobx\";\nimport {Button, CircularProgress, DialogTitle, TablePagination, TextField} from \"@material-ui/core\";\nimport {Autocomplete, createFilterOptions} from \"@material-ui/lab\";\nimport {gatewayImage, partnerBrandImage, stageImage} from \"./resources\";\nimport {ScanRecord, stagesDisplay} from \"./record\";\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport {GatewayConfig, IGatewayConfigRecord} from \"./gateway-config\";\nimport {OSAStats} from \"./osa-stats\";\nimport {RecordStore} from \"./record-store\";\nimport {BarChart} from \"./bar-chart\";\nimport {ErrorPage} from \"./error-page\";\nimport {Bar, Line} from 'react-chartjs-2';\nimport moment from \"moment\";\nimport {PageHeader} from \"./page-header\";\nimport {AlertsTable} from \"./alerts-table\";\nimport {OSAAlerts} from \"./osa-alerts\";\n\nconst prettyFloat = (f: number) => `${Math.floor(f*10)/10}`;\n\nconst formatTurnoverTime = (tMs: number): string => {\n    const MINUTE_MS = 60*1000;\n    const HOUR_MS = 60*MINUTE_MS;\n    const DAY_MS = 24*HOUR_MS;\n    if (tMs < HOUR_MS) {\n        const minutes = tMs / MINUTE_MS;\n        return `${prettyFloat(minutes)} Minutes`\n    }\n    if (tMs < DAY_MS) {\n        const hours = tMs / HOUR_MS;\n        return `${prettyFloat(hours)} Hours`\n    }\n\n    const days = tMs / DAY_MS;\n    return `${prettyFloat(days)} Days`\n\n};\n\n@inject(\"gatewayConfig\", \"records\")\n@observer\nexport class SettingsPage extends React.Component<{ gatewayConfig: GatewayConfig, records: RecordStore}, {}> {\n\n    @observable private ready = false;\n    private currentTimeoutHandle;\n\n    @observable selectedGatewayId: string;\n    @observable osaStats: OSAStats;\n\n    componentDidMount() {\n        const first = this.props.gatewayConfig.customerRetailShelves[0];\n        if (first) {\n            this.selectedGatewayId = first.ID;\n        }\n        this.loadData();\n    }\n\n    loadData() {\n        this.ready = false;\n        if (this.currentTimeoutHandle) {\n            clearTimeout(this.currentTimeoutHandle);\n        }\n        this.currentTimeoutHandle = setTimeout(() => {\n            this.ready = true;\n            this.currentTimeoutHandle = null;\n        }, 1000);\n    }\n\n    componentWillUnmount() {\n        if (this.currentTimeoutHandle) {\n            clearTimeout(this.currentTimeoutHandle);\n        }\n    }\n\n    render() {\n        return <div>\n            <style dangerouslySetInnerHTML={{__html:`\n                .gw-conf-table {\n                  border-collapse: collapse;\n                  margin: 20px 0;\n                }\n                \n                .gw-conf-table tr:first-child {\n                    font-weight: bold;\n                }\n                \n                .gw-conf-table td {\n                    border: 1px solid;\n                    padding: 5px;\n                }\n            `}}/>\n            <PageHeader title={\"Settings\"}/>\n            {!this.ready ?\n                <div style={{padding: 10}}><CircularProgress/></div>\n            : <div style={{width: 1200, padding: 20}}>\n                    <b> Gateway Configuration </b><br/>\n                    <table className={\"gw-conf-table\"}>\n                        <tr>\n                            <td>Gateway ID</td>\n                            <td>Alias</td>\n                            <td>Location Category</td>\n                            <td>Site Category</td>\n                            <td>Backroom Gateway ID</td>\n                        </tr>\n                        {\n                            this.props.gatewayConfig.all().map(c => <tr>\n                                <td>{c.ID}</td>\n                                <td>{c.Alias}</td>\n                                <td>{c.LocationCategory}</td>\n                                <td>{c.SiteCategory}</td>\n                                <td>{c.BackroomGatewayId}</td>\n                            </tr>)\n                        }\n                    </table>\n                    <div>\n                        To set a different gateway configuration, upload a CSV file in the specified format.\n                        This can be done using the <pre style={{display: 'inline-block'}}>aws-cli</pre> tool and the provided AWS credentials:\n                        <div style={{border: \"1px solid\", backgroundColor: \"#dfdfdf\", display: \"inline-block\", padding: 5, fontFamily: \"\"}}>\n                            export AWS_ACCESS_KEY_ID=<i>Your AWS_ACCESS_KEY_ID</i> <br/>\n                            export AWS_SECRET_ACCESS_KEY=<i>Your AWS_SECRET_ACCESS_KEY</i> <br/>\n                            export AWS_DEFAULT_REGION=us-west-2 <br/><br/>\n                            aws s3 cp /path/to/local/gateway-config.csv s3://trackntrace-config/gw-conf.csv <br/>\n                        </div>\n                        <br/>\n                        <br/>\n                        Note: the page must be refreshed for changes to take effect.\n                        <br/>\n                        <br/>\n                    </div><br/>\n                    <b>Scan Records</b><br/>\n                    <div style={{display: \"flex\", flexDirection: \"row\", alignItems: \"baseline\"}}>\n                        <div style={{marginRight: 10}}>The system detected {this.props.records.records.length} item scan records.</div>\n                        <Button variant=\"contained\"  onClick={() => this.deleteAllRecordsClicked()} color=\"secondary\" style={{marginTop: 20}}>\n                            DELETE ALL SCAN RECORDS\n                        </Button>\n                    </div>\n            </div>}\n        </div>\n    }\n\n    private deleteAllRecordsClicked() {\n        if (window.confirm(\"Are you sure you want to delete all scan records?\")) {\n            // TODO remove\n        }\n    }\n}\n","import * as _ from 'lodash';\n\nimport React from \"react\";\nimport {getCurrentRoute, IRoute, routes} from \"./routes\";\nimport {observer} from \"mobx-react\";\nimport {observable} from \"mobx\";\n\nfunction Link({onClick, className}) {\n    return <div onClick={() => onClick()} style={{width: '100%', boxSizing: 'border-box', margin: 30}} className={className}/>;\n}\n\n@observer\nexport class SideMenu extends React.Component<{},{}> {\n\n    @observable currentRoute = getCurrentRoute();\n\n    render() {\n        const className = (route: IRoute) => {\n            return `menu-item menu-item-${route.cssClass} ${this.currentRoute.name == route.name ? 'selected' : ''}`\n        };\n\n        return <div className=\"side-menu\" style={{height: '100%', width: '100%'}}>\n            <style dangerouslySetInnerHTML={{__html:`\n                .side-menu .menu-item-overview {\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-overview.svg);\n                }\n\n                .side-menu .menu-item-overview.selected{\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-overview-selected.svg);\n                    border-right: 3px solid #3e4d73;\n                }\n\n                .side-menu .menu-item-overview:hover{\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-overview-hovered.svg);\n                }\n\n                .side-menu .menu-item-item-status {\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-item-status.svg);\n                }\n\n                .side-menu .menu-item-item-status.selected{\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-item-status-selected.svg);\n                    border-right: 3px solid #3e4d73;\n                }\n\n                .side-menu .menu-item-item-status:hover{\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-item-status-hovered.svg);\n                }\n\n                .side-menu .menu-item-osa {\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-item-osa.svg);\n                }\n\n                .side-menu .menu-item-osa.selected {\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-item-osa-selected.svg);\n                    border-right: 3px solid #3e4d73;\n                }\n\n                .side-menu .menu-item-osa:hover {\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-item-osa-hovered.svg);\n                }\n\n                .side-menu .menu-item-settings {\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-item-settings.svg);\n                }\n\n                .side-menu .menu-item-settings.selected {\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-item-settings-selected.svg);\n                    border-right: 3px solid #3e4d73;\n                }\n\n                .side-menu .menu-item-settings:hover {\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-item-settings-hovered.svg);\n                }\n\n                .side-menu .menu-item-shrinkage {\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-item-shrinkage.svg);\n                }\n\n                .side-menu .menu-item-shrinkage.selected {\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-item-shrinkage-selected.svg);\n                    border-right: 3px solid #3e4d73;\n                }\n\n                .side-menu .menu-item-shrinkage:hover {\n                    background-image: url(${process.env.REACT_APP_BASE_URL}/menu-item-shrinkage-hovered.svg);\n                }\n            `}}/>\n            <div className='side-menu-orbs' style={{padding: 30, marginBottom: 20}}>\n                <img style={{height: 32, width:32}} src={process.env.REACT_APP_BASE_URL + '/orbs-logo.svg'}/>\n            </div>\n            {\n                _.sortBy(routes, r => r.displayIndex).map(\n                    route => <Link\n                        onClick={() => this.navigateTo(route)}\n                        className={className(route)}\n                    />\n                )\n            }\n        </div>\n    }\n\n    navigateTo(route: IRoute) {\n        window.location.hash = route.path;\n        this.currentRoute = route;\n    }\n\n    componentDidMount(): void {\n        window.onhashchange = () => this.currentRoute = getCurrentRoute();\n    }\n\n    componentWillUnmount(): void {\n        window.onhashchange = null;\n    }\n}\n","import React from \"react\";\nimport * as _ from \"lodash\";\nimport {observer} from \"mobx-react\";\nimport {observable} from \"mobx\";\n\n@observer\nexport class LoadingPage extends React.Component<{}, {}> {\n\n    @observable loadingCaption = \"Loading...\";\n\n    render() {\n        return <div className={\"loading-page\"}>\n            <div className={\"logo-container\"}>\n                <div style={{\n                    height: '100%',\n                    width: '100%',\n                    textAlign: 'center'\n                }}><img className={\"orbs-logo\"} src={process.env.REACT_APP_BASE_URL + \"/orbs-logo.svg\"}/></div>\n                <div className={\"loading-lbl\"}>{this.loadingCaption}</div>\n            </div>\n        </div>\n    }\n\n    componentDidMount() {\n        let i = 0;\n        setInterval(() => {\n            this.loadingCaption = \"Loading\" + _.range(i).map(() => '.').join('');\n            i = (i + 1) % 4;\n        }, 500)\n    }\n}\n","import * as _ from 'lodash';\nimport React from 'react';\nimport {inject, observer} from \"mobx-react\";\nimport {RecordStore} from \"./record-store\";\nimport {BrowserRouter, Switch, Route, HashRouter} from 'react-router-dom';\nimport {routes} from \"./routes\";\nimport {SideMenu} from \"./side-menu\";\nimport {LoadingPage} from \"./loading-page\";\nimport {ErrorPage} from \"./error-page\";\nimport {GatewayConfig} from \"./gateway-config\";\n\n\n@inject('records', 'gatewayConfig')\n@observer\nexport class App extends React.Component<{\n  records?: RecordStore\n  gatewayConfig?: GatewayConfig\n},{}> {\n  render() {\n    return this.props.records.ready && this.props.gatewayConfig.ready ? <HashRouter>\n      <div style={{height: '100%', width: '100%', maxWidth: 2000, display: \"inline-block\", position: 'relative', textAlign: 'left'}}>\n        <div style={{position: 'absolute', top: 0, left: 0, bottom: 0, width: 89}}>\n          <SideMenu/>\n        </div>\n        <div style={{position: 'absolute', top: 0, left: 90, bottom: 0, right:0, overflow: 'auto', borderRight: \"1px solid #ebedf8\"}}>\n            <Switch>\n              {\n                routes.map(route => {\n                  const PageComponent = route.component;\n                  return <Route path={route.path}>\n                    <PageComponent/>\n                  </Route>\n                })\n              }\n            </Switch>\n        </div>\n      </div>\n    </HashRouter>\n            : this.props.records.err || this.props.gatewayConfig.err ? <ErrorPage err={this.props.records.err || this.props.gatewayConfig.err}/>\n            : <LoadingPage/>\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"mobx-react\";\nimport {createStores} from \"./stores\";\nimport {App} from \"./App\";\n\nconst stores = createStores();\n(window as any).stores = stores;\n\nReactDOM.render(\n    <Provider {...stores}>\n        <App/>\n    </Provider>\n    ,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n","import {RecordStore} from \"./record-store\";\nimport {Statistics} from \"./statistics\";\nimport {GatewayConfig} from \"./gateway-config\";\nimport {OSAAlerts} from \"./osa-alerts\";\nimport {ShrinkageAlerts} from \"./shrinkage-alerts\";\n\nexport interface IStores {\n    records: RecordStore;\n    statistics: Statistics;\n    gatewayConfig: GatewayConfig;\n    osaAlerts: OSAAlerts;\n    shrinkageAlerts: ShrinkageAlerts;\n}\n\nexport function createStores(): IStores {\n    const gatewayConfig = new GatewayConfig();\n    const records = new RecordStore(gatewayConfig);\n    const statistics = new Statistics(records);\n    const osaAlerts = new OSAAlerts(statistics, gatewayConfig);\n    const shrinkageAlerts = new ShrinkageAlerts(statistics, gatewayConfig);\n    return {\n        records,\n        gatewayConfig,\n        statistics,\n        osaAlerts,\n        shrinkageAlerts\n    }\n}\n"],"sourceRoot":""}